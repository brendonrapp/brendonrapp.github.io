<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Economy of Effort]]></title>
  <link href="http://www.economyofeffort.com/atom.xml" rel="self"/>
  <link href="http://www.economyofeffort.com/"/>
  <updated>2017-01-05T16:52:12-08:00</updated>
  <id>http://www.economyofeffort.com/</id>
  <author>
    <name><![CDATA[Brendon Rapp]]></name>
    <email><![CDATA[brendon@jaguardesignstudio.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Best of 2016: Metal]]></title>
    <link href="http://www.economyofeffort.com/2017/01/05/best-of-2016-metal/"/>
    <updated>2017-01-05T02:29:52-08:00</updated>
    <id>http://www.economyofeffort.com/2017/01/05/best-of-2016-metal</id>
    <content type="html"><![CDATA[<style type="text/css" scoped="">
  h3 { margin-top: 2em; }
  .embed-container { margin-bottom: 1em; }
</style>

<p>2016 has ended, to much celebration. In spite of the fact that the <a href="http://www.bbc.com/news/politics/eu_referendum/results">worst</a> <a href="http://www.bbc.com/news/election/us2016">ramifications</a> of 2016 will manifest themselves in 2017 and beyond, people are looking to the new year in hopes of an upswing.</p>

<p>Not everything in 2016 was terrible, though. Some stuff was great. I am going to make a few Best of 2016 lists. We’ll see how far I get with them.</p>

<p>This list is the first one, and features what I consider to be the best albums (and EPs) in 2016 which fall under the general umbrella of “metal”.</p>

<h2 id="best-metal-album-of-2016">Best Metal Album of 2016</h2>
<h3 id="cobalt---slow-forever">Cobalt - Slow Forever</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/yHqKNxy4ee0" frameborder="0" allowfullscreen=""></iframe></div>

<p>The contest was basically over before it began. Slow Forever came out in March, and nothing else really came close. This is just an amazing melting pot of extreme metal. Cobalt becomes less tethered to black metal on this album, pulling from blues, Americana, hardcore, Tool, psych, prog, and hard rock. And Charlie Fell comes roaring in like he was shot out of a fucking cannon, just spitting fire in what is hands down the best extreme vocal performance of the year.</p>

<h2 id="the-rest-of-the-best">The Rest of the Best</h2>
<h4 id="in-no-particular-order">(in no particular order)</h4>

<h3 id="subrosa---for-this-we-fought-the-battle-of-ages">SubRosa - For This We Fought the Battle of Ages</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/tPM_PexLplw" frameborder="0" allowfullscreen=""></iframe></div>

<p>I said “in no particular order”, but I put this one at the top because, if not for the Cobalt album, this would have been my #1 metal album of 2016. Doom metal has been enjoying a spike in interest, with a ton of bands churning out excellent but derivative albums. SubRosa is one of the bands moving the style forward, incorporating chamber music elements (similar to a number of post-rock bands) and Americana folk into something far more diverse than the “Praise Iommi” crowd produces. (Although, still, praise Iommi). The expressive, emotive sound they crafted on their earlier albums is perfected here, though really it was perfected on the last album. The atmosphere is simultaneously dark and beautiful, and the band flows from prettiness to harsh catharsis and back. The dual violins sing and then scream. The lyrics are often weighty, best illustrated by “Troubled Cells”, which is essentially a protest piece against the Mormon church’s treatment of LGBT people (frontwoman Rebecca Vernon is a practicing Mormon). This is a band at the top of their game, and the top of whatever subgenre one wants to label them.</p>

<h3 id="cult-of-luna--julie-christmas---mariner">Cult of Luna + Julie Christmas - Mariner</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/ZdGlx2pm6W8" frameborder="0" allowfullscreen=""></iframe></div>

<p>All of my sex dreams involve Julie Christmas screaming at me. She’s not even the one I’m having sex with, she’s just there for ambiance. The queen of my fear boners teams up with excellent Swedish post-metal band Cult of Luna. As much as Julie Christmas’s strangled-cat screaming freak outs make me melt, her level of restraint on this album works in its favor. It’s probably the most subdued I’ve heard her on an album. While she tends to be the focal point on her former bands’ records, here she’s a peer with the band, as Cult of Luna are too strong for her to overpower. Cult of Luna posted something interesting on their Facebook page after touring with Julie in support of this album, referencing how they “had no idea of how Julie and Andrew would be on a personal level” and how touring sometimes “takes out the worst in people”, but that they were happy with how well everyone got on during the tour. Reading between the lines, it sounds like Julie might have a reputation for being difficult, which is something I’ve suspected (Made Out of Babies basically went on to form a new band with all of their members except Julie). Fortunately, that didn’t seem to rear its head for Cult of Luna.</p>

<h3 id="oranssi-pazuzu---värähtelijä">Oranssi Pazuzu - Värähtelijä</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/Q_lGSUrvWMo" frameborder="0" allowfullscreen=""></iframe></div>

<p>Another favorite from early in the year. It’s like krautrock black metal, which is awesome if you like krautrock, as I do. Unlike earlier releases from the band, though, the black metal influence isn’t dominant, but is part of an ever-shifting stylistic mix. The band creates melodic ambient grooves, which it then uses as launching pads to go into various freak-out excursions, and then uses them as the landing pads upon which they bring it back down and flow back into the steady groove. Some people (AMG reviewer and commenters mostly) have complained about the production, but it’s a thick boomy sound that brings to mind early Pink Floyd (which works with this material), and not that stereotypical shrill made-for-cassette black metal production. In fact, I would argue that the relative lack of “dynamic range” is part of what keeps the album from falling into that loud-soft-loud post-rock trope.</p>

<h3 id="inter-arma---paradise-gallows">Inter Arma - Paradise Gallows</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/g82e8fOE3rQ" frameborder="0" allowfullscreen=""></iframe></div>

<p>This album is just massive, both in sound and in running length (71 minutes, not including the hidden track after ~20 minutes of silence on the digital release). It took me some time to fully absorb, as it’s a difficult one to take in as background music during work. It’s an expansive, encompassing mix of sludge, prog, and doom, just a record to get absolutely lost in. The group consists of a number of multi-instrumentalist musicians, and they put their flexibility to use in creating a wide sonic palette with which to build these staggering, cavernous pieces. The cover art is some of the best of the year, with the collapsing ship being overtaken by the sea, and is befitting of the force-of-nature power conveyed by the music.</p>

<h3 id="neurosis---fires-within-fires">Neurosis - Fires Within Fires</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/fH94DmxwLCE" frameborder="0" allowfullscreen=""></iframe></div>

<p>I did not know what to expect from a Neurosis album in 2016. The previous album had released right before the <em>last</em> US presidential election, and the members have been so busy with solo projects and side bands. Neurosis remains as powerful as ever, but their sound has taken on a sense of age, of weariness. The shaman leading the rituals has become acutely aware of the fact that he’s an old man. The lyric “we will never, ever get to rest” during the climax of album closer “Reach” always hits me square, as it perfectly encapsulates what Neurosis sounds like today: old, wise, tired, but unbroken.</p>

<h3 id="ulcerate---shrines-of-paralysis">Ulcerate - Shrines of Paralysis</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/DVgVXGjDkVM" frameborder="0" allowfullscreen=""></iframe></div>

<p>Although not blessed with the same caliber of album title as 2009’s [i]Everything is Fire[/i], Ulcerate’s avant-garde death metal still burns everything the fuck down. I loathe to refer to Ulcerate as “tech death” for the same reason there’s a number of bands I hate to refer to as “prog metal” - both of those labels bring to mind guitars playing as many notes as possible, like 4 people simultaneously pounding on a Rock Band guitar. Make no mistake, Ulcerate often plays at a breakneck pace, but much of that is in the blistering rhythms more so than any tweedly-deedly-dee shred king wannabe guitar wankery. In fact, it can take a careful listen to recognize the guitars are often holding and sustaining notes longer when the drums kick into full speed.</p>

<h3 id="sumac---what-one-becomes">Sumac - What One Becomes</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/LIBZi7G-sSU" frameborder="0" allowfullscreen=""></iframe></div>

<p>Aaron Turner’s best will always make my list. This has to make any list of best-produced metal albums of the year - recorded in an empty church, the reverberations feed back into the massive, overwhelming sound. That is, if you call it metal. It’s too heavy to call it anything else, really, but the band tosses traditional song structure aside. It’s just heavy avant-garde music. It’s definitely an album that can try your attention span, as that lack of structure makes it less accessible than a classic ISIS album - it’s more like Turner’s work with Old Man Gloom taken to a new stylistic extreme. The weirdest thing about this album is that it released on Thrill Jockey, which I still associate with post-rock and indie-jazz-rock bands like Tortoise, Isotope 217, and The Sea and Cake.</p>

<h3 id="lycus---chasms">Lycus - Chasms</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/iME7C0Y7YHg" frameborder="0" allowfullscreen=""></iframe></div>

<p>This one just barely released in 2016 (Google Play annoyingly continues to mark it 2015, but it was January 2016). Lycus doesn’t turn the funeral doom formula on its head, so much as they incorporate other elements to avoid predictability. Peppered throughout are trem-picked black metal screech-outs, which nicely break apart and mesh with the slower funeral doom marches, rather than clashing. The addition of cello adds more texture and dimension to the low rumbling sound. It’s the band’s shifts in tone and tempo, which work in service to the relentless doom march rather than derailing it, which make the album. Absolutely delightful, and I am still crushed that I had to choose between seeing Baroness or them at Psycho Las Vegas (and, as fun as Baroness’s set was, I think I may have made the wrong choice).</p>

<h3 id="mantar---ode-to-the-flame">Mantar - Ode to the Flame</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/N3UVZfZ51oE" frameborder="0" allowfullscreen=""></iframe></div>

<p>Oh yes. Mantar cooks up blackened sludge and delivers it in repeated gut punches. Ode to the Flame is a little less straightforward than the band’s debut album, and that makes all the difference. They pull bits from other genres into their mix, from doom to thrash to crust punk to groove, but with a persistent coat of grime layered on top. This is another one of those albums this year that delivers catchy songs in an extreme metal style, and it got a lot of great reviews but doesn’t seem to have made anyone’s best-of lists the way some of those others have. Well those lists are wrong, Mantar blows those other releases away.</p>

<h2 id="best-metal-eps-of-2016">Best Metal EPs of 2016</h2>

<h3 id="gorguts---pleiades-dust">Gorguts - Pleiades’ Dust</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/xOpT9r6zZJQ" frameborder="0" allowfullscreen=""></iframe></div>

<p>If there were anything right in this world, Gorguts’ existence would spawn an identifiable new subgenre, a sort of Metal in Opposition update to the Rock in Opposition (RIO) genre of Henry Cow, Univers Zero, etc. On this EP, Gorguts puts avant-garde death metal into a multi-movement modern classical style of composition, culminating in a continuous 33 minute piece of music. And it demands to be listened to in a continuous 33 minutes of time, as it flows between ambient atmospherics and crushing experimental death metal bursts.</p>

<h3 id="tombs---all-empires-fall">Tombs - All Empires Fall</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/jP0AuScHhGU" frameborder="0" allowfullscreen=""></iframe></div>

<p>Tombs has added synthesizer/electronics player (and second vocalist) Fade Kainer, which brings some new industrial and gothic elements into the mix. This EP is clearly the band experimenting with this new elements. It features sections of ambience that were hinted at with the track “Severed Lives” on 2014’s fabulous album Savage Gold, but Kainer’s presence greatly aids in the execution of these moments, adding the necessary texture to make them interesting. When not exploring these more subdued areas, the band kicks in with the same kind of propulsive metal that made Savage Gold so good.</p>

<h3 id="skeletonwitch---the-apothic-gloom">Skeletonwitch - The Apothic Gloom</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/ZgHDonZa7ws" frameborder="0" allowfullscreen=""></iframe></div>

<p>This one’s so good, and it’s a shame that it isn’t getting more attention, perhaps due to being an EP. The band dismissed their previous frontman due to his alcoholism, and enlisted Wolvhammer’s Adam Clemans to take over. His vocals have more of a presence than the previous vocalist’s, whose voice on the last album tended to get lost a bit in the audio soup with the trem-picked guitars and high hats. Skeletonwitch writes tight pieces that sound bigger and longer than their runtime, and that’s on full display here with what they’ve packed into a 20 minute EP.</p>

<h3 id="goya---doomed-planet">Goya - Doomed Planet</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/7vesPaK6-DQ" frameborder="0" allowfullscreen=""></iframe></div>

<p>This Arizona three-piece has been releasing quite a bit of material of late. This year alone, they released two new EPs, a third EP of early demos, and a two-song single of Nirvana covers. This EP is the best of the bunch, featuring two long heavy tracks of desert-tinged doom, a short instrumental piece, and a Marilyn Manson cover. Great for fans of thick fuzz and clean vocals.</p>

<h2 id="honorable-mentions">Honorable Mentions</h2>

<p>Oh my god. It really hurt to keep the next 3 out of the top 10 albums.</p>

<h3 id="oathbreaker---rheia">Oathbreaker - Rheia</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/tMTAkIDRHiA" frameborder="0" allowfullscreen=""></iframe></div>

<p>Hipster black metal alert! This is a varied album that moves from blast-beat black metal to shoegaze to soft atmospherics, all punctuated by vocalist Caro Tanghe. Tanghe often brings Julie Christmas to mind, both in her clean vocals and shrieking freak-outs. Really, “Deafheaven + Julie Christmas” wouldn’t be the worst way to describe the band, though Oathbreaker comes from a hardcore background that informs their style even as they distance themselves from it. What sets Oathbreaker apart is just the raw emotion that they convey, primarily through those vocals. The band breaks down the opening 8 minutes of the album in an <a href="http://songexploder.net/oathbreaker">excellent episode of the Song Exploder podcast</a>.</p>

<h3 id="helms-alee---stillicide">Helms Alee - Stillicide</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/-6mVu45lVUM" frameborder="0" allowfullscreen=""></iframe></div>

<p>This is one of my most played albums this year, and it hurt to leave it off the 10. I almost wanted to cheat and call it an indie rock album and slip it on my Other Genres list instead. The Sludgelord describes it nicely: imagine Kylesa at their most psychedelic covering Sleater-Kinney. It’s sludge-y indie rock, driven by the vocals of all 3 members (2 female and 1 male). This album should be one of the ones getting the “hipster” indie crossover attention.</p>

<h3 id="vektor---terminal-redux">Vektor - Terminal Redux</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/BpL3j8sCPAw" frameborder="0" allowfullscreen=""></iframe></div>

<p>The first couple of times I listened to this, I didn’t get very far. It’s a beast at 73 minutes long. After a little warming up, it started to click for me, scratching that same scifi-thrash itch that last year’s VHOL album so brilliantly did. I haven’t paid much attention to the album’s narrative - I don’t get much out of the “concept” part of “concept album” these days - but I get a lot out of the thrashy riffing. It’s a long album, but by the time “Recharging the Void” finishes, I’m ready to hear “Charging the Void” again.</p>

<h3 id="insomnium---winters-gate">Insomnium - Winter’s Gate</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/5mb5mu_JO9Q" frameborder="0" allowfullscreen=""></iframe></div>

<p>There were a few cold-weather atmospheric black metal albums this year, but Insomnium’s was the one that stood out the most. Written as a single album-length track, but broken up into parts (a la Crimson or A Pleasant Shade of Gray), this 40-minute album is intended to be taken as a whole, but does break down into separate songs much more cleanly than, say, the Gorguts EP. Everything about the compositions on this album screams “winter”. The compositions feed into the album’s winter theme extremely well, from the trem-picked blizzard winds to the soft piano evoking near-silent snowfall in softer moments like the first half of Part 5. It’s too bad I already finished playing through Icewind Dale: Enhanced Edition, because this would have made a great soundtrack for those play sessions. I’ll break it out again when I play through that expansion content of Pillars of Eternity.</p>

<h3 id="if-these-trees-could-talk---the-bones-of-a-dying-world">If These Trees Could Talk - The Bones of a Dying World</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/uLg4BoOSHQA" frameborder="0" allowfullscreen=""></iframe></div>

<p>The best instrumental post-metal album this year <em>isn’t</em> the Russian Circles album, it’s this one. The band signed to Metal Blade a year ago, whom promptly reissued their previously self-released first two albums. The band features three guitarists that create layered melodies, making for some mesmerizing passages as the guitars weave in and out of playing separate and interlocked parts. It’s debatable whether they should fall under post-metal or post-rock, much like Russian Circles, but what’s less debatable is that it’s an excellent record, and the band should get some more attention under Metal Blade’s wing.</p>

<h3 id="sunn-o---НЕЖИТЬ-живьём-в-России-nolife-alive-in-moscow">SUNN O))) - НЕЖИТЬ: живьём в России (NOLIFE: Alive in Moscow)</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/xmIM_ztG93Y" frameborder="0" allowfullscreen=""></iframe></div>

<p>This was a quiet release, as a limited edition triple-vinyl (all sold out) and Bandcamp digital download. This is a recording of the band’s first Moscow performance, with audio pulled both from the soundboard and audience, mixed and mastered together. As quiet as the release of the album was, the audio itself is HUGE. Massive. It makes previous SUNN O))) live albums like Domkirke and  Aghartui Live 09-10 (the most recent live album, itself a digital + limited physical release) sound small in comparison. It is probably the closest representation of SUNN’s oppressing live sound put to recording. (Or at least, I assume, based on reputation, as I’ve yet to experience it in person. God, please let SUNN O))) be one of the Psycho headliners this year).</p>

<h3 id="meshuggah---the-violent-sleep-of-reason">Meshuggah - The Violent Sleep of Reason</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/oFiDcazicdk" frameborder="0" allowfullscreen=""></iframe></div>

<p>Much better than Koloss. So much better. Meshuggah style changes are always subtle movements within a relatively small area, like a quarterback shifting around in the pocket. They’re immediately identifiable as Meshuggah, yet people certainly identify different styles as favorites. For me, the best Meshuggah has been the more hard-charging Meshuggah on Chaosphere and ObZen. The Violent Sleep of Reason doesn’t quite keep pace with those releases, but it’s certainly closer than some of their more deliberately paced recordings. It’s also less repetitive than some of those other albums. It’s probably my third or fourth favorite Meshuggah album (depending on where I feel like putting Destroy Erase Improve), which is a pretty damn good ranking for an album.</p>

<h3 id="deftones---gore">Deftones - Gore</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/Aztiwn17vpE" frameborder="0" allowfullscreen=""></iframe></div>

<p>This is the first Deftones album that really landed with me. This is what “alternative metal” should be. It’s like an album from an alternate timeline, where the alternative metal of Faith No More, Helmet, Alice in Chains, and Soundgarden continued forward, and never took that right turn into nu-metal (which, yes, is an ironic idea given Around the Fur). As if there was a plague that was constrained to only wiping out the Family Values Tour ‘98. Gone is the preening nu-metal Fast and Furious ‘tude, and in its place is a mature, textured album, with some of the best songwriting the genre has seen of late.</p>

<h3 id="aluk-todolo---voix">Aluk Todolo - Voix</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/q9f2EbQWE6Y" frameborder="0" allowfullscreen=""></iframe></div>

<p>Oranssi Pazuzu isn’t the only krautrock black metal I got to enjoy this year. Unlike the Oranssi Pazuzu album, this one is entirely instrumental, and it leans more towards focusing on extended hypnotic grooves a la Neu! or <em>Tago Mago</em> era Can (the best Can). As is a theme of many albums this year, the 43 minute length plays out as a single unbroken piece of music, divided up into six tracks named simply I through VI. Hypnotic really is the best word for this, as it’s very easy to get lost in. One particular late-night coding session of mine this month involved me with headphones on and this on repeat, and repeatedly hitting the end of the album and wondering where the time went. It’s enveloping, and relentlessly forward moving. Even softer parts, like IV, have an undeniable steady forward momentum. This will remain in my rotation for a long time as coding music.</p>

<h3 id="gojira---magma">Gojira - Magma</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/hnRv4azfris" frameborder="0" allowfullscreen=""></iframe></div>

<p>People call this Gojira’s “Black Album”. The Grammy nomination seems to lend some credence to that claim. But while Gojira may have turned down their heaviness, that’s in comparison with themselves. There’s no “Unforgiven” or “Nothing Else Matters” here, not unless you count the album’s instrumental outro. This is still a hard hitting metal album, and what they’ve traded down in heaviness and instrumental complexity, they’ve gained as songwriters. It’s not quite my ideal direction for them - I would have loved an album that uses these more song-oriented pieces in-between a couple of longer complex pieces, giving a taste of both worlds. While that’s not the way they went, I am satisfied with their final result. Just as long as the next one isn’t Gojira’s “Load”.</p>

<h3 id="khemmis---hunted">Khemmis - Hunted</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/nFagcBIfe20" frameborder="0" allowfullscreen=""></iframe></div>

<p>Hunted is a sublime mix of traditional doom metal, jumpstarted with some Iron Maiden energy and guitar noodling. It’s another band that’s not satisfied to just slug out some slow riffs and wallow. (Although, again, praise Iommi.) What’s amazing is just how approachable the whole thing is. I could send this album to my dad, even though it’s ostensibly a doom metal album with track lengths that average nearly 9 minutes. (And it is an album that I repeatedly played in the car with my wife, to no complaint.) The compositions aren’t overly technical, but they also avoid staying in one place too long, deftly moving to new melodies without overwhelming the listener. Clean, emotive vocals dominate, with some doom growls joining the mix as additional texture. It’s easy to see why this got so much love on best of lists. Whereas the Helms Alee album is one I think should cross over to indie rock fans, this is one that should cross over to classic hard rock fans.</p>

<h3 id="russian-circles---guidance">Russian Circles - Guidance</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/eWoJs4QkvwE" frameborder="0" allowfullscreen=""></iframe></div>

<p>I still very much enjoy a bi-annual Russian Circles album, even if the formula becomes recognizable (pretty, gentler intro track, second track that kicks everything up a notch, etc). If there’s a knock on the album, it’s the existence of the group’s strong, similar back catalog. It’s hard to be mad when they consistently deliver such a high quality, and when so few other groups can deliver the same thing in the same sort of space.</p>

<h3 id="revocation---great-is-our-sin">Revocation - Great is Our Sin</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/pJS8CizuTmQ" frameborder="0" allowfullscreen=""></iframe></div>

<p>I was surprised to see the slightly cool reception that this album received. The reviews were positive enough, but I don’t recall seeing it on many (if any) best-of lists, even as an honorable mention. I think this falls into the same issue as Russian Circles: they’ve been steadily prolific and maintained a high level of quality, but a formula is emerging. This album doesn’t depart very far from what they achieved on Deathless. That said, to me, this is Revocation at their most melodic and fluid. It’s a subtle maturing, but it feels like the rest of their package catching up to their technical acument. I think part of the issues with the cool reception is that the first track feels very Revocation-by-numbers, and first tracks have a way of sticking out the most and coloring opinions. It’s with the second track, “Theatre of Horror”, where the album begins in earnest.</p>

<h2 id="participation-ribbon">Participation Ribbon</h2>

<h3 id="abbath---abbath">Abbath - Abbath</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/kzk0aGTvW64" frameborder="0" allowfullscreen=""></iframe></div>

<p>It was cool seeing Abbath on the Decibel Tour this year, playing a mix of his new solo album and some Immortal favorites. The solo album doesn’t stray far from what Immortal did well, which isn’t much surprise given he was that band’s primary composer in addition to being the frontman. It probably helps that Immortal took such a long break (only 3 albums released in the 2000s), because this would probably feel a lot more tired if the were 7 albums between Sons of Northern Darkness and this, instead of only one. Instead, it feels like Abbath had plenty of ideas left to explore within the general style Immortal perfected on that album.</p>

<h3 id="helion-prime---helion-prime">Helion Prime - Helion Prime</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/F0VfnqLUs8M" frameborder="0" allowfullscreen=""></iframe></div>

<p>Vektor isn’t the only band with a hard-drivin’ space metal album this year. Helion Prime’s debut album is a fun, cheesy chunk of space-themed power metal. Power metal is rarely my go-to, usually relegated to occasional change-up status, and this album isn’t going to be the one to change that. But it is a good time, helped in large part by the female not-at-all-operatic vocals. That vocalist has left the band, but in an interesting turn of events, Witch Mountain’s Kayla Dixon has been tapped to be the replacement. That makes two bands that Kayla fronts without appearing on any of their released albums, but hopefully both bands change that in 2017.</p>

<h3 id="kvelertak---nattesferd">Kvelertak - Nattesferd</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/-6ZG0QpYAWQ" frameborder="0" allowfullscreen=""></iframe></div>

<p>This album sounds like an extreme metal band covering classic hard rock songs from a parallel timeline. The songs sound familiar, like they’re forgotten hits from that mid-70s-to-early-80s period of arena rock, bar bands, and punk. Songs that, if sung and produced in clean fashion, you could easily imagine alongside Thin Lizzy and Ted Nugent, alongside Van Halen and Lynyrd Skynyrd and The Ramones. It’s like a classic hard rock album from a reality where growled vocals tagged along with fuzzy overdriven guitars when they went mainstream.</p>

<h3 id="sumerlands---sumerlands">Sumerlands - Sumerlands</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/1Lfn_EjgN9A" frameborder="0" allowfullscreen=""></iframe></div>

<p>Sumerlands is a music geek’s love letter to late ’80s American metal, written to mimic that style but without the imperative to stick closer to radio-friendliness. It’s got that Fates Warning, Queensryche thing going on, which were some of my entry points into the genre. I think the album is great, but what I’m not certain of is if there’s a band-sustaining theme there, or if this is just better as a one-off.</p>

<h3 id="gatecreeper---sonoran-depravation">Gatecreeper - Sonoran Depravation</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/2kIuuojYu-A" frameborder="0" allowfullscreen=""></iframe></div>

<p>Apparently retro is in, because here’s another one. For Gatecreeper, it’s classic Swedish, maxed-out-HM-2-pedal death metal. Sonoran Deprevation is their debut full-length, and at just under 31 minutes, it’s a lean and dialed-in assault. There’s no fat here, just a straight-ahead riff delivery device. Not a lot in terms of originality, but it stands out for just how well it does what it does, and for how directly it achieves it. That economy makes this a great one to throw down for some immediate, unencumbered ass-kicking.</p>

<h3 id="babymetal---metal-resistance">BABYMETAL - METAL RESISTANCE</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/GvD3CHA48pA" frameborder="0" allowfullscreen=""></iframe></div>

<p>The “metal” in BABYMETAL faded pretty hard over the course of their debut album after a strong start, which made me wonder if the band was ultimately going to just be J-Pop with distorted guitars going forward. Instead, they doubled-down on metal for the second record, pulling in power metal and djent and stomping on the gas pedal. This time around, only one song in the second half really dials down the metal (“No Rain, No Rainbow”), but it is bracketed on each side with balls-to-the-wall \m/ \m/. In the end, it is still a tad gimmicky, and the band (while good) is mainly notable for meshing disparate sounds and styles together more so than crafting new ones, but it’s a fun album that doesn’t lose its edge halfway through like the debut (and is also, wisely, a tad shorter at 53 minutes).</p>

<h3 id="borknagar---winter-thrice">Borknagar - Winter Thrice</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/NDrrKv2wjvk" frameborder="0" allowfullscreen=""></iframe></div>

<p>Borknagar’s 2012 album Urd was like their version of Kurt Warner’s Super Bowl season with the Arizona Cardinals - a recapturing of quality the band had enjoyed during their previous peak (which I would argue was the 98-00 period with The Archaic Course and Quintessence albums). It was a tall order to expect them to maintain that level, and unsurprisingly, they fall a bit short here. But the album is notable in that it’s a getting-the-singers-all-back-together effort, with vocalist Garm joining Vintersorg, ICS Vortex, and Lars Nedland, albeit in a guest capacity on a couple of tracks. Stylistically, this doesn’t deviate much from Urd, outside of not being quite as consistently good. Leaving a couple of tracks from the 50 minute running length on the cutting room floor would have helped the rest of the material stand out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord save not updating hstore fields in Rails 4.0-4.1]]></title>
    <link href="http://www.economyofeffort.com/2014/12/16/activerecord-save-not-updating-hstore-fields-in-rails-4-dot-0-4-dot-1/"/>
    <updated>2014-12-16T20:10:00-08:00</updated>
    <id>http://www.economyofeffort.com/2014/12/16/activerecord-save-not-updating-hstore-fields-in-rails-4-dot-0-4-dot-1</id>
    <content type="html"><![CDATA[<p>Here’s some behavior you might not expect when using Postgres’s hstore with ActiveRecord.</p>

<p>ActiveRecord::Base#update_attributes does what you’d think:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span> <span class="o">=</span> <span class="no">Thing</span><span class="p">.</span><span class="nf">new</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">update_attributes</span><span class="p">(&#x7b;</span><span class="ss">data: </span><span class="p">&#x7b;</span><span class="s1">'mykey'</span> <span class="o">=&gt;</span> <span class="s1">'myval'</span><span class="p">&#x7d;&#x7d;)</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">reload</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="s1">'mykey'</span><span class="p">]</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">=&gt;</span> <span class="s2">"myval"</span></div></div></pre></div></figure>

<p>However, ActiveRecord::Base#save might not:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span> <span class="o">=</span> <span class="no">Thing</span><span class="p">.</span><span class="nf">new</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="s1">'mykey'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'myval'</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">=&gt;</span> <span class="s2">"myval"</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">save</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="k">BEGIN</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">INSERT</span> <span class="no">INTO</span> <span class="s2">"things"</span> <span class="p">(</span><span class="s2">"created_at"</span><span class="p">,</span> <span class="s2">"updated_at"</span><span class="p">)</span> <span class="no">VALUES</span> <span class="p">(</span><span class="vg">$1</span><span class="p">,</span> <span class="vg">$2</span><span class="p">)</span> <span class="no">RETURNING</span> <span class="s2">"id"</span>  <span class="p">[[</span><span class="s2">"created_at"</span><span class="p">,</span> <span class="s2">"2014-12-17 04:02:03.119354"</span><span class="p">],</span> <span class="p">[</span><span class="s2">"updated_at"</span><span class="p">,</span> <span class="s2">"2014-12-17 04:02:03.119354"</span><span class="p">]]</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="n">ms</span><span class="p">)</span>  <span class="no">COMMIT</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">=&gt;</span> <span class="kp">true</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">reload</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="s1">'mykey'</span><span class="p">]</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">=&gt;</span> <span class="kp">nil</span></div></div></pre></div></figure>

<p>Huh? I left the SQL log line in the output here so we can see that our hstore field is indeed left out of the SQL INSERT statement entirely, which explains why the field is <code class="highlighter-rouge">nil</code> once we re-fetch the object from the database.</p>

<p>But why is it doing this? It turns out that, in Rails 4.0 and 4.1, this operation doesn’t mark the field as “dirty” in ActiveRecord, so the change is not detected and included in the save operation.</p>

<p>We can mark it manually with <a href="http://api.rubyonrails.org/classes/ActiveModel/Dirty.html">ActiveModel::Dirty</a>’s <code class="highlighter-rouge">attr_name_will_change!</code>, eg.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span> <span class="o">=</span> <span class="no">Thing</span><span class="p">.</span><span class="nf">new</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">data_will_change!</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="s1">'mykey'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'myval'</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">=&gt;</span> <span class="s2">"myval"</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">save</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="k">BEGIN</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">INSERT</span> <span class="no">INTO</span> <span class="s2">"things"</span> <span class="p">(</span><span class="s2">"created_at"</span><span class="p">,</span> <span class="s2">"data"</span><span class="p">,</span> <span class="s2">"updated_at"</span><span class="p">)</span> <span class="no">VALUES</span> <span class="p">(</span><span class="vg">$1</span><span class="p">,</span> <span class="vg">$2</span><span class="p">,</span> <span class="vg">$3</span><span class="p">)</span> <span class="no">RETURNING</span> <span class="s2">"id"</span>  <span class="p">[[</span><span class="s2">"created_at"</span><span class="p">,</span> <span class="s2">"2014-12-17 04:08:32.066027"</span><span class="p">],</span> <span class="p">[</span><span class="s2">"data"</span><span class="p">,</span> <span class="s2">"</span><span class="se">\"</span><span class="s2">mykey</span><span class="se">\"</span><span class="s2">=&gt;</span><span class="se">\"</span><span class="s2">myval</span><span class="se">\"</span><span class="s2">"</span><span class="p">],</span> <span class="p">[</span><span class="s2">"updated_at"</span><span class="p">,</span> <span class="s2">"2014-12-17 04:08:32.066027"</span><span class="p">]]</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">   <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">COMMIT</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">=&gt;</span> <span class="kp">true</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">reload</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="s1">'mykey'</span><span class="p">]</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">=&gt;</span> <span class="s2">"myval"</span></div></div></pre></div></figure>

<p>The documentation states that <code class="highlighter-rouge">attr_name_will_change!</code> should be called <em>before</em> changes to the attribute, as seen in the example above.</p>

<p>Doesn’t this seem like a pain? Well, as discussed in <a href="https://github.com/rails/rails/issues/6127">Rails issue #6127</a>, it was expected behavior for Rails 4.0 and 4.1, but improvements to serialized attributes have been <a href="https://github.com/rails/rails/pull/15674">merged into Rails</a> and will appear in Rails 4.2. Setting values and calling save will just work.</p>

<p>So, in the meantime, the workaround is manually marking properties as dirty with <code class="highlighter-rouge">attr_data_will_change!</code> before making and saving changes to those fields.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL hstore default value in Rails 4]]></title>
    <link href="http://www.economyofeffort.com/2014/12/16/postgres-hstore-default-value-in-rails-4/"/>
    <updated>2014-12-16T19:02:00-08:00</updated>
    <id>http://www.economyofeffort.com/2014/12/16/postgres-hstore-default-value-in-rails-4</id>
    <content type="html"><![CDATA[<p>Having used <a href="https://github.com/diogob/activerecord-postgres-hstore">activerecord-postgres-hstore</a> before native hstore support was added to Rails 4, I was used to the behavior of empty hstore fields returning an empty hash <code class="highlighter-rouge"><span class="p">{}</span></code> when a row with such a field was instantiated into an ActiveRecord object, as was discussed and added in the gem’s <a href="https://github.com/diogob/activerecord-postgres-hstore/issues/22">issue #22</a>.</p>

<p>This behavior changed in Rails 4’s hstore support. An ActiveRecord object with an empty hstore field will return <code class="highlighter-rouge">nil</code> for that field rather than an empty hash. (When someone opened a bug in the Rails repo to suggest implementing the same behavior in the new native hstore support, <a href="https://github.com/rails/rails/issues/11520">it was brushed off</a>.)</p>

<p>By default, that leaves us to have to nil-check every hstore property in our objects before accessing any keys (eg. <code class="highlighter-rouge">@myobj.data &amp;&amp; @myobj.data['mykey']</code>). However, we can get our “empty” hstore fields instantiating as empty hashes instead of nil with a tweak of our migration.</p>

<p>Simply add <code class="highlighter-rouge">default: '', null: false</code> to the migration, eg.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">class</span> <span class="nc">AddDataToThings</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">def</span> <span class="nf">change</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">add_column</span> <span class="ss">:things</span><span class="p">,</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">:hstore</span><span class="p">,</span> <span class="ss">default: </span><span class="s1">''</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">end</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span></div></div></pre></div></figure>

<p>With that default in place, our empty hstore fields will instantiate as empty hashes, and we can avoid the nil check:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">thing</span> <span class="o">=</span> <span class="no">Thing</span><span class="p">.</span><span class="nf">new</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">=&gt;</span> <span class="c1">#&lt;Thing id: nil, ... &gt;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Thing</span><span class="p">.</span><span class="nf">data</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">=&gt;</span> <span class="p">&#x7b;&#x7d;</span></div></div></pre></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beyond Ctrl: Make That Caps Lock Key Useful]]></title>
    <link href="http://www.economyofeffort.com/2014/08/11/beyond-ctrl-remap-make-that-caps-lock-key-useful/"/>
    <updated>2014-08-11T14:19:00-07:00</updated>
    <id>http://www.economyofeffort.com/2014/08/11/beyond-ctrl-remap-make-that-caps-lock-key-useful</id>
    <content type="html"><![CDATA[<p><strong>tl;dr: Supercharge your Caps Lock key by making it Esc when tapped, and Ctrl when held</strong></p>

<p>Caps Lock. A useless key sitting in prime keyboard real estate. Many software developers and power users repurpose the key by remapping it to Control.</p>

<p>After all, on old UNIX terminals, that’s exactly what the key to the left of “A” was:</p>

<p><img src="http://www.economyofeffort.com/media/images/sun-keyboard.png" alt="" /></p>

<p>Replacing the Caps Lock key with Ctrl makes a lot of keyboard shortcuts more convenient. But we need not stop there. Some true Men and Women of Genius came to the realization that, since Ctrl’s behavior is based around behind held down (a modifier key) and doesn’t do anything when pressed and released, it is possible to make Caps Lock do something <em>else</em> when tapped instead of held. For Vim users, the obvious choice is the Esc key.</p>

<p>We can do this in both Mac OS X and Linux.</p>

<h2 id="os-x">OS X</h2>

<h3 id="if-you-want-all-ctrl-keys-to-behave-like-esc-when-tapped">If you want all Ctrl keys to behave like Esc when tapped</h3>

<p>This is the easiest way, and the option I use. (I rarely find myself hitting the normal Ctrl keys anyway.)</p>

<p>First, open System Preferences -&gt; Keyboard, and click Modifier Keys button. Click the Caps Lock drop-down and set it to Control:</p>

<p><img src="http://www.economyofeffort.com/media/images/osx-remap-esc-key.png" alt="" /></p>

<p>Now, install <a href="https://pqrs.org/osx/karabiner/">Karabiner</a> (formerly known as KeyRemap4MacBook). If you are a Homebrew user, you should check out <a href="https://github.com/caskroom/homebrew-cask">Homebrew Cask</a> and install Karabiner with <code class="highlighter-rouge">$ brew cask install karabiner</code></p>

<p>Open Karabiner. Enable the first setting from the screenshot below:</p>

<p><img src="http://www.economyofeffort.com/media/images/karabiner-1.png" alt="" /></p>

<p>The other option I have there, “Disable Escape Key”, is something I’ve done just to get myself in the habit of using the Caps Lock key for Esc. It is not required, it is just an option if you want to help train yourself to use the new key.</p>

<h3 id="if-you-only-want-the-caps-lock-key-to-behave-like-esc-when-tapped">If you only want the Caps Lock key to behave like Esc when tapped</h3>

<p>To do this, we’re going to take a slightly different approach. Instead of using OS X’s native Caps Lock remapping, we need to use another app, called <a href="https://pqrs.org/osx/karabiner/seil.html">Seil</a> (from the same developer as Karabiner) to remap the Esc key to F19, and then use Karabiner to map F19 to our cool Ctrl/Esc hybrid key.</p>

<p>Install both <a href="https://pqrs.org/osx/karabiner/">Karabiner</a> and <a href="https://pqrs.org/osx/karabiner/seil.html">Seil</a>. (Here again, if you use <a href="https://github.com/caskroom/homebrew-cask">Homebrew Cask</a>, you can do this with <code class="highlighter-rouge">$ brew cask install karabiner</code> and <code class="highlighter-rouge">$ brew cask install seil</code>)</p>

<p>Open Seil. First, enable the “Change Caps Lock” option, and set the keycode to 80:</p>

<p><img src="http://www.economyofeffort.com/media/images/seil.png" alt="" /></p>

<p>Next, in Karabiner, enable the “F19 for Escape and Control” option:</p>

<p><img src="http://www.economyofeffort.com/media/images/karabiner-2.png" alt="" /></p>

<h2 id="linux">Linux</h2>

<p>To accomplish the same setup in Linux, we need to use a tool called <a href="https://github.com/alols/xcape">xcape</a>.</p>

<p>Build and install xcape per the instructions on the project’s Wiki page. One additional step I take after building the app is copying the <code class="highlighter-rouge">xcape</code> executable to /usr/local/bin.</p>

<h3 id="if-you-only-want-the-caps-lock-key-to-behave-like-esc-when-tapped-1">If you only want the Caps Lock key to behave like Esc when tapped</h3>

<p>Add the following lines to your ~/.profile:</p>
<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">~/.profile</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row unnumbered"><div class="code-highlight-line">setxkbmap -option <span class="s1">'caps:ctrl_modifier'</span>
</div></div><div data-line="2" class="code-highlight-row unnumbered"><div class="code-highlight-line">xcape -e <span class="s1">'Caps_Lock=Escape'</span></div></div></pre></div></figure>

<h3 id="if-you-want-all-ctrl-keys-to-behave-like-esc-when-tapped-1">If you want all Ctrl keys to behave like Esc when tapped</h3>

<p>Same as above, except we add more arguments to the xcape line:</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">~/.profile</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row unnumbered"><div class="code-highlight-line">setxkbmap -option <span class="s1">'caps:ctrl_modifier'</span>
</div></div><div data-line="2" class="code-highlight-row unnumbered"><div class="code-highlight-line">xcape -e <span class="s1">'Caps_Lock=Escape;Control_L=Escape;Control_R=Escape'</span></div></div></pre></div></figure>

<p>Note: If you use some other method of remapping the Caps Lock key to Ctrl (some desktop environments have it as an option in their Keyboard settings, much like OS X), then the Caps_Lock=Escape mapping may not do anything, and you will need to use the Control_L one.</p>

<p>One last little tidbit: Ubuntu 14.10 (“Utopic”) has xcape <a href="http://packages.ubuntu.com/utopic/xcape">in the universe repos</a>, at least as of the time of this writing. Hopefully it will be included in Ubuntu releases from here on out.</p>

<h2 id="now-your-caps-lock-key-rules">Now Your Caps Lock Key Rules</h2>

<p>The most useless key on the keyboard (except maybe for Pause, when’s the last time you used that?) is now your Swiss Army knife. Vim’s keybindings will make a lot more sense now that you can use your pinky the way Bill Joy did on his old ADM3A terminal:</p>

<p><img src="http://www.economyofeffort.com/media/images/adm3a.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert HTML to Haml (and Back Again) Within a Vim Buffer]]></title>
    <link href="http://www.economyofeffort.com/2014/07/20/convert-html-to-haml-within-vim-buffer/"/>
    <updated>2014-07-20T13:36:00-07:00</updated>
    <id>http://www.economyofeffort.com/2014/07/20/convert-html-to-haml-within-vim-buffer</id>
    <content type="html"><![CDATA[<p><a href="http://haml.info/">Haml</a> is great. Haml is the JSON to HTML’s XML: all of the garbage and noise stripped away, with only the data and minimal amount of ceremony left.</p>

<p>I use Haml on all Rails projects now, but when dealing with legacy projects, I still encounter HTML/ERb templates.</p>

<p>Using the <a href="https://github.com/haml/html2haml">html2haml</a> command-line tool, I can easily convert HTML/ERb in my Vim buffer into Haml.</p>

<p>The project distributes as a Ruby gem, so installing is accomplished with:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="gp">$ </span>gem install html2haml</div></div></pre></div></figure>

<p>Then, the magic is done with some Vim bindings to feed a buffer or visually-selected chunk of text to the application, and paste its output back into the buffer, replacing the original text.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">h</span> <span class="p">:</span>%<span class="p">!</span>html2haml <span class="p">--</span>erb <span class="m">2</span><span class="p">&gt;</span> <span class="sr">/dev/</span>null<span class="p">&lt;</span>CR<span class="p">&gt;:</span><span class="k">set</span> ft<span class="p">=</span>haml<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">vmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">h</span> <span class="p">:!</span>html2haml <span class="p">--</span>erb <span class="m">2</span><span class="p">&gt;</span> <span class="sr">/dev/</span>null<span class="p">&lt;</span>CR<span class="p">&gt;</span></div></div></pre></div></figure>

<p>When changing the entire file, I’ve also added the command to change the filetype in the Vim buffer, for convenience.</p>

<p>That takes us from HTML/ERb to Haml, but what if we need to go back in the other direction? This is possible with the <a href="https://github.com/elia/haml2erb">haml2erb</a> tool. Unfortunately, this tool is not actively maintained the way html2haml is. For me, on Ruby 2.1.1, it was necessary to install the 0.3.0 prerelease version, as the last official version would not build. Once installed, though, it worked as expected.</p>

<p>We must explicitly indicate which version to install in order to install prerelease gems:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="gp">$ </span>gem install haml2erb -v <span class="s1">'0.3.0.pre.3'</span></div></div></pre></div></figure>

<p>The Vim bindings are much the same as the html2haml ones:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">e</span> <span class="p">:</span>%<span class="p">!</span>haml2erb <span class="m">2</span><span class="p">&gt;</span> <span class="sr">/dev/</span>null<span class="p">&lt;</span>CR<span class="p">&gt;:</span><span class="k">set</span> ft<span class="p">=</span>eruby<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">vmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">e</span> <span class="p">:!</span>haml2erb <span class="m">2</span><span class="p">&gt;</span> <span class="sr">/dev/</span>null<span class="p">&lt;</span>CR<span class="p">&gt;</span></div></div></pre></div></figure>

<p>I have not used this nearly as much as html2haml, as I’m rarely changing layout code from Haml back into HTML. However, the couple of times I have needed to do it, it has worked exactly as expected..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixed the Archive Page]]></title>
    <link href="http://www.economyofeffort.com/2014/07/20/fixed-the-archive-page/"/>
    <updated>2014-07-20T02:18:00-07:00</updated>
    <id>http://www.economyofeffort.com/2014/07/20/fixed-the-archive-page</id>
    <content type="html"><![CDATA[<p>Finally got around to fixing the Archive page on this site.</p>

<p>If I recall correctly, what happened originally is that I was attempting to get rid of the “/blog/” part of the archive path, but got distracted halfway through and left it incomplete.</p>

<p>For reference: this part of the archive path is not a user-configurable part of Octopress per se. It is a default location for a file in Jekyll, which is in <code class="highlighter-rouge">source/blog/archive</code> in an Octopress site repository. Simply moving the <code class="highlighter-rouge">archive/</code> folder out of <code class="highlighter-rouge">blog/</code> and into the top level of <code class="highlighter-rouge">source/</code> will make the archive page generate without the “/blog/” part of the page. (For further reference, see <a href="https://github.com/imathis/octopress/issues/464#issuecomment-5587568">the workaround post</a> on the <a href="https://github.com/imathis/octopress/issues/464">issue on Github</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim tricks for Ruby hashes]]></title>
    <link href="http://www.economyofeffort.com/2014/07/09/vim-tricks-for-ruby-hashes/"/>
    <updated>2014-07-09T19:59:00-07:00</updated>
    <id>http://www.economyofeffort.com/2014/07/09/vim-tricks-for-ruby-hashes</id>
    <content type="html"><![CDATA[<p>I have a couple of functions in my .vimrc for manipulating Ruby hashes.</p>

<p>The first one is to convert hashes from Ruby 1.8 style into Ruby 1.9+ style, eg.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="c1"># before</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="ss">:symbol_key</span> <span class="o">=&gt;</span> <span class="s1">'value'</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="c1"># after</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="ss">symbol_key: </span><span class="s1">'value'</span></div></div></pre></div></figure>

<p>I create this function for both Normal and Visual modes to allow updating either a selected hash, or the entire file.</p>
<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">function</span><span class="p">!</span> RubyHashesAll<span class="p">()</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">:</span>%s<span class="sr">/:\([^ ]*\)\(\s*\)=&gt;/</span>\<span class="m">1</span><span class="p">:</span>/ge
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">endfunction</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">function</span><span class="p">!</span> RubyHashesSelected<span class="p">()</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">:</span><span class="s1">'&lt;,'</span><span class="p">&gt;</span>s<span class="sr">/:\([^ ]*\)\(\s*\)=&gt;/</span>\<span class="m">1</span><span class="p">:</span>/ge
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">endfunction</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>rhh <span class="p">:</span><span class="k">call</span> RubyHashesAll<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">vmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>rhh <span class="p">:</span><span class="k">call</span> RubyHashesSelected<span class="p">()&lt;</span>CR<span class="p">&gt;</span></div></div></pre></div></figure>

<p>Next, I have one for taking a hash and extracting an array of the hash keys.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="c1"># before</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7b;</span> <span class="s1">'one'</span> <span class="o">=&gt;</span> <span class="n">two</span><span class="p">,</span> <span class="ss">:three</span> <span class="o">=&gt;</span> <span class="s1">'four'</span><span class="p">,</span> <span class="ss">five: </span><span class="mi">6</span> <span class="p">&#x7d;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="c1"># after</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">[</span><span class="s1">'one'</span><span class="p">,</span> <span class="ss">:three</span><span class="p">,</span> <span class="ss">:five</span><span class="p">]</span></div></div></pre></div></figure>

<p>Here, I have the command bound only in Visual mode, as I don’t see a case where I’d want to do this globally.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">function</span><span class="p">!</span> RubyExtractHashKeys<span class="p">()</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">:</span><span class="s1">'&lt;,'</span><span class="p">&gt;</span>s<span class="sr">/\([:'"]\?[a-zA-Z]\+['"]\?\)\s*=&gt;[^,&#x7d;]\+\([,&#x7d;]\)/</span>\<span class="m">1</span>\<span class="m">2</span>/ge
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">:</span><span class="s1">'&lt;,'</span><span class="p">&gt;</span>s<span class="sr">/\([a-zA-Z]\+\)[:]\s*[^,&#x7d;]\+\([,&#x7d;]\)/</span><span class="p">:</span>\<span class="m">1</span>\<span class="m">2</span>/ge
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">:</span><span class="s1">'&lt;,'</span><span class="p">&gt;</span>s<span class="sr">/&#x7b;\s*/</span>\<span class="p">[</span>/ge
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">:</span><span class="s1">'&lt;,'</span><span class="p">&gt;</span>s<span class="sr">/\s*&#x7d;/</span>\<span class="p">]</span>/ge
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">endfunction</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">vmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>rhe <span class="p">:</span><span class="k">call</span> RubyExtractHashKeys<span class="p">()&lt;</span>CR<span class="p">&gt;</span></div></div></pre></div></figure>

<p>The regexes can probably be improved to fix some edge cases, and I’m certain there’s a way in Vim to make it so that I don’t have to define the All and Selected versions of RubyHashes as separate functions. But these do the job for me now, until I reach a higher plane of Vim mastery.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zsh, tmux, vim, and 256 color madness]]></title>
    <link href="http://www.economyofeffort.com/2014/07/04/zsh/"/>
    <updated>2014-07-04T21:20:00-07:00</updated>
    <id>http://www.economyofeffort.com/2014/07/04/zsh</id>
    <content type="html"><![CDATA[<p><strong>tl;dr: You want $TERM to be <code class="highlighter-rouge">screen-256color</code> when tmux is running, and you want it to be <code class="highlighter-rouge">xterm-256color</code> when tmux is <em>not</em> running. Also, launch tmux with <code class="highlighter-rouge">-2</code> argument.</strong></p>

<p>I love <a href="https://wiki.archlinux.org/index.php/Tmux">tmux</a>. It is the primary reason why I switched from using gVim to console vim. I love having a fully terminal-based workflow. It beats switching between a GUI editor app and terminal window any day.</p>

<p>This switch, however, was not without some issues. Here are the solutions to two that I encountered.</p>

<h3 id="weirdness-with-zsh-tmux-and-vim">Weirdness with zsh, tmux, and vim</h3>

<h4 id="problems">Problems:</h4>

<ul>
  <li>when $TERM is <code class="highlighter-rouge">screen-256color</code> but tmux is <em>not</em> running, zsh will echo your command into the output when you hit Enter:</li>
</ul>

<p><img src="http://www.economyofeffort.com/media/images/screen-256color-no-tmux.png" alt="" /></p>

<p>Notice how the output of the “ls” and “echo” commands repeat themselves in the output stream as soon as I switched to <code class="highlighter-rouge">screen-256color</code>.</p>

<ul>
  <li>when $TERM is <code class="highlighter-rouge">xterm-256color</code> while tmux is running, colors will not display properly in Vim:</li>
</ul>

<p style="text-align:left !important;"><code>vim /etc/default/grub</code> while <code>TERM=screen-256color</code>:</p>
<p><img src="http://www.economyofeffort.com/media/images/tmux-vim-screen-256color.png" alt="" /></p>

<p style="text-align:left !important;"><code>vim /etc/default/grub</code> while <code>TERM=xterm-256color</code>:</p>
<p><img src="http://www.economyofeffort.com/media/images/tmux-vim-xterm-256color.png" alt="" /></p>

<h4 id="solution">Solution:</h4>

<p>In my zsh config (~/.zshrc), I set xterm-256color to be the default TERM, but right after that, added a command that would re-export TERM as screen-256color if tmux is running:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>export TERM=xterm-256color
[ -n "$TMUX" ] &amp;&amp; export TERM=screen-256color
</code></pre>
</div>

<h3 id="no-vim-colorschemes-when-tmux-is-launched-by-terminal-app-in-place-of-shell">No Vim colorschemes when tmux is launched by terminal app in place of shell</h3>

<h4 id="problem">Problem:</h4>

<p>I ran into a specific set of circumstances where my Vim colorscheme would not display.</p>

<p>Terminal applications usually launch a shell by default, but some (like gnome-terminal) have the option of defining a command to be run rather instead of the shell.</p>

<p>If I set this command to <code class="highlighter-rouge">tmux</code>, tmux would indeed launch. However, if I then ran Vim, the colorscheme would not display correctly.</p>

<p>However, if I allowed gnome-terminal to launch a shell, and then ran <code class="highlighter-rouge">tmux</code> myself from that shell, Vim would display properly within that tmux session.</p>

<h4 id="solution-1">Solution:</h4>

<p>I got my clue from <a href="http://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode">this StackOverflow post</a>. Basically, what is happening is that, when running <code class="highlighter-rouge">tmux</code> from within my shell, which is configured for 256 colors, tmux would launch in 256 color mode. But when I had gnome-terminal launch tmux directly, it would not.</p>

<p>The easy way around this was to use the “-2” argument for tmux, making the command <code class="highlighter-rouge">tmux -2</code>.</p>

<p><img src="http://www.economyofeffort.com/media/images/gnome-terminal-auto-tmux.png" alt="" /></p>

<p>With that command in place, tmux launches whenever firing up gnome-terminal, and does so in 256 color mode.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Careful What You Name Your Rails Partials]]></title>
    <link href="http://www.economyofeffort.com/2013/08/03/careful-what-you-name-your-rails-partials/"/>
    <updated>2013-08-03T15:53:00-07:00</updated>
    <id>http://www.economyofeffort.com/2013/08/03/careful-what-you-name-your-rails-partials</id>
    <content type="html"><![CDATA[<p><strong>tl;dr: Hyphens bad.</strong></p>

<p>I encountered a strange bug in Rails 3.2.13 this week. I kept getting an error that traced back to the very start of a partial:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">_example-partial-logged-in.html.haml:1: syntax error, unexpected keyword_in, expecting keyword_end</div></div></pre></div></figure>

<p>I tracked it down to <a href="https://github.com/rails/rails/issues/7079">this issue</a>, which pointed out that the error was related to the hyphenated name ending with a Ruby reserved word.</p>

<p>By convention, Rails uses underscores for word separation in file names. Hyphens are not completely disallowed (the above works if I rename the file to end with a non-reserve word), but can lead to issues.</p>

<p>The issue linked above contains a pull request for a better error message, which was merged into Rails 4. But for those still on Rails 3 and earlier, if you see this vague error message, now you know why.</p>

<p><img class="center" src="http://www.economyofeffort.com/media/images/hyphen.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reattach-to-user-namespace: The Fix For Your tmux in OS X Woes]]></title>
    <link href="http://www.economyofeffort.com/2013/07/29/reattach-to-user-namespace-the-fix-for-your-tmux-in-os-x-woes/"/>
    <updated>2013-07-29T17:21:00-07:00</updated>
    <id>http://www.economyofeffort.com/2013/07/29/reattach-to-user-namespace-the-fix-for-your-tmux-in-os-x-woes</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://www.economyofeffort.com/media/images/tmux-osx.jpg" /></p>

<p><strong>tl;dr: Things not behaving right in tmux on OS X? Install reattach-to-user-namespace</strong></p>

<p>Are you a tmux + Mac OS X user? Have you had any of the following problems?</p>

<ul>
  <li>Running <code class="highlighter-rouge">launchctl</code> to start services fails with a message like <code class="highlighter-rouge">launch_msg(): Socket is not connected</code></li>
  <li>Using the OS X Pasteboard commands <code class="highlighter-rouge">pbcopy</code> and <code class="highlighter-rouge">pbpaste</code> and having them not work</li>
  <li>Launching a GUI app from the terminal and getting a “ghost window”: the app window loads in the background, with no dock icon, cannot be Command-Tab’d to, and the app’s menu does not populate the top bar when the window gains focus</li>
</ul>

<p>Why does this happen? Chris Johnsen has some <a href="https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard">details</a>…</p>

<blockquote>
  <p><em>tmux</em> uses the <em>daemon(3)</em> library function when starting its server process. In Mac OS X 10.5, Apple changed <em>daemon(3)</em> to move the resulting process from its original bootstrap namespace to the root bootstrap namespace. This means that the <em>tmux</em> server, and its children, will automatically and uncontrollably lose access to what would have been their original bootstrap namespace (i.e. the one that has access to the pasteboard service).</p>
</blockquote>

<p>It turns out that Apple has patched the version of GNU screen that they distribute with OS X to avoid this problem. But this is 2013, and we UNIX geeks have moved on to tmux, right? Chris goes on in that README to explain why porting Apple’s screen patch to tmux would be tricky.</p>

<p>So, instead, he provides the <em>reattach-to-user-namespace</em> wrapper program. This allows us to launch a process and have that process be attached to the per-user bootstrap namespace, which, to put it simply, makes the program behave as we are expecting.</p>

<p>The “trick” is to configure tmux to launch its shells with the <em>reattach-to-user-namespace</em> wrapper. By doing that, the shells tmux launches, as well as everything those shells launch, will be attached to the user namespace, and the problems listed at the top of this post will no longer be issues. We can use the <code class="highlighter-rouge">default-command</code> option in ~/.tmux.conf to wrap our shell launching command.</p>

<p>First, we need to install <em>reattach-to-user-namespace</em>. If you use Homebrew or MacPorts, this is as easy as:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>; with Homebrew
$ brew install reattach-to-user-namespace

; with MacPorts
$ port install tmux-pasteboard
</code></pre>
</div>

<p>I use the same dotfiles for Linux as well as OS X, so I only want to do this in the OS X environment. I accomplish this with the following:</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">~/.tmux.conf</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="c">" at the end of the file</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">if</span><span class="p">-</span><span class="k">shell</span> <span class="s1">'test "$(uname)" = "Darwin"'</span> <span class="s1">'source ~/.tmux-osx.conf'</span></div></div></pre></div></figure>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">~/.tmux-osx.conf</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">set</span><span class="p">-</span><span class="k">option</span> <span class="p">-</span><span class="k">g</span> default<span class="p">-</span>command <span class="s2">"reattach-to-user-namespace -l zsh"</span></div></div></pre></div></figure>

<p>If you only use OS X, you can skip creating an external file, and just put the set-option line directly in your ~/.tmux.conf. Also, I am using zsh, so my command to <em>reattach-to-user-namespace</em> is zsh. If you’re using a different shell, change that to your shell’s name.</p>

<p>With this configuration in place, kill and re-launch tmux. The shells that tmux launches should now get attached to the user namespace, and namespace-related issues should be resolved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Numpads]]></title>
    <link href="http://www.economyofeffort.com/2013/07/26/no-numpads/"/>
    <updated>2013-07-26T19:20:00-07:00</updated>
    <id>http://www.economyofeffort.com/2013/07/26/no-numpads</id>
    <content type="html"><![CDATA[<p>My mother is an accountant. Walk by her office on any given day, and you’ll likely hear the mechanical sounds of an accounting calculator printing its results to a stream of paper.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2010/12/calculator.jpg" width="350" height="263" /></p>

<p>I used to make fun of the endless <em>crunch-crunch-crunch</em> sound that echoed down the hallways.  These days, she tells me, the ol’ hand calculator doesn’t get quite as much use as before. More and more of the accounting business is computerized.</p>

<p>It comes as little surprise. Computers were invented to crunch numbers. When computers became machines that fit on a desktop, the “killer apps” were all about numbers: the first two applications named in Wikipedia’s <a href="http://en.wikipedia.org/wiki/Killer_application">entry for killer applications</a> are Visicalc and Lotus 1-2-3.</p>

<p>Accordingly, it did not take long for personal computer manufacturers to take inspiration from those hand calculators and add the number pad to the right of the typewriter key layout.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2010/12/Terminal-dec-vt100.jpg" width="499" height="391" /> Personal computers, however, have moved well beyond the domain of the office desktop. Indeed, for most people, the computer is no longer thought of as a device for performing calculations. They are used for communication, and for accessing and storing data. I don’t have data to back it up, but I would wager that most computer users don’t punch in long sequences of numbers regularly.</p>

<p>And yet, while the computer has evolved, the number pad remains. Like the wings of a flightless bird. the vestigal number pad sits unused, eating up space on millions of desktops.</p>

<p>Oh sure, you use the number pad, you say. And perhaps you do. But do you really use it enough to dedicate 6 inches of desk width for it? More to the point, does <em>every</em> computer user? People are <a href="http://news.cnet.com/8301-31021_3-20005908-260.html">buying laptops and netbooks</a> for their computing devices more and more, and I don’t ever hear people complaining about how much they miss the numpad.</p>

<p>And yet, the vast majority of keyboards for sale include the numpad. Finding keyboards without them takes some effort.</p>

<p>One of the few I became aware of when starting the search was the Happy Hacking Keyboard Lite.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/02/hhkb-lite.jpg" /></p>

<p>It’s a nice, small deck. It uses a “UNIX” keyboard layout, like the ones on the old Sun boxes in one of the computer labs back at university.</p>

<p>Apple has come around on the idea of ditching the numpad. New iMacs come with a wireless keyboard that has no numpad.</p>

<p><img class="center" src="http://www.economyofeffort.com/media/images/imac.jpg" /></p>

<p>I considered picking up one of these. And I actually did pick up a couple of Apple’s discontinued wired USB tenkeyless keyboards.</p>

<p><img class="center" src="http://www.economyofeffort.com/media/images/apple-compact-keyboard.jpg" /></p>

<p>They’re not bad as spare keyboards to have around, but they were not going to be my primary keyboard. (My wife is using one on her desktop machine, though).</p>

<p>One keyboard I really want is the 84-key “Space Saving” version of the IBM Model M.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2010/12/spacesaver1280-300x203.jpg" /> Sadly, they are awfully hard to come by. I watch for them on <a href="http://www.clickykeyboards.com">clickykeyboards.com</a> but it’s just an endless list of <span style="color: #ff0000;"><strong>SOLD</strong></span> boards.</p>

<p>But the keyboard that ended my search was the <a href="http://elitekeyboards.com/products.php?sub=leopold,tenkeyless&amp;pid=fc200rtab">Leopold Tenkeyless Tactile Touch</a> from EliteKeyboards. It combined my desire for a compact no-numpad keyboard with the desire to have a mechanical keyboard.</p>

<p><img class="center" src="http://www.economyofeffort.com/media/images/leopold.jpg" /></p>

<p>It’s been a couple of years now since I bought this keyboard, and while the idea of spending $100 on a keyboard was a tough pill to swallow at the time, I would not hesitate to do it again. The compact size make life nicer on my desk, and the action of the mechanical key switches is so much more enjoyable than mashing the rubber dome switches on a non-mechanical keyboard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye Wordpress, Hello Octopress]]></title>
    <link href="http://www.economyofeffort.com/2012/08/17/goodbye-wordpress/"/>
    <updated>2012-08-17T17:32:00-07:00</updated>
    <id>http://www.economyofeffort.com/2012/08/17/goodbye-wordpress</id>
    <content type="html"><![CDATA[<p>I have been running this blog on Wordpress since 2005. Back then, Wordpress was purely a blogging engine.</p>

<p>In the years since then, Wordpress has grown into something more akin to a CMS built around a blogging engine. At work, we have used it as such for a couple of <a href="http://www.luckydogsbakery.com">small</a> <a href="http://www.warginwines.com">storefronts</a>, built around the blog and the Wordpress e-Commerce shopping cart plugin.</p>

<p><img class="right" src="http://www.economyofeffort.com/media/images/wordpress-world-problems.jpg" width="300" />
Maintaining a full Wordpress installation for my personal blog, however, had become cumbersome. Particularly so since I am not running any other PHP code for personal projects. At <a href="http://www.lonestarrubyconf.com/">Lone Star Ruby Conference</a>, <a href="https://speakerdeck.com/u/techpeace/p/front-end-web-development-with-ruby">one of the talks</a> finally convinced me that it was time to leave Wordpress behind, and to go with a static site compiled blog engine. I had previous experience with a static site compiler, nanoc, which we use at work for creating static websites. A more blog-aware tool that works similarly held plenty of appeal to me.</p>

<p>I also no longer wished to run this site on hosting that costs me money. I started with shared hosts like Dreamhost, graduated to a Linode VPS (more for experimenting with VPS hosting than for any actual traffic needs), and most recently ditched the VPS and hosted on NearlyFreeSpeech’s low-cost pay-as-you-use hosting. But for how low traffic the site is, paying even what I give to NearlyFreeSpeech seemed unnecessary. Heroku’s free single web dyno was staring me in the face, offering more than enough hosting power for a static version of my site, for $0.</p>

<h2 id="introducing-jekyll-and-octopress">Introducing Jekyll and Octopress</h2>
<p><img class="right" src="http://www.economyofeffort.com/media/images/jekyll-doctor.jpg" width="300" /></p>

<p><a href="https://github.com/imathis/octopress/">Octopress</a> is a framework built around the Jekyll blogging engine. It provides various plugins and extensions, as well as a nice default theme, to make blogging on Jekyll a nice out-of-the-box experience.</p>

<p>Jekyll allows users to write blog posts in <a href="http://daringfireball.net/projects/markdown/syntax/">Markdown</a> and compile them into static HTML pages. Instead of writing posts in a web-based panel, posts are created by adding a new Markdown file in the _posts folder, and writing the post in there using the user’s editor of choice. Finally, I am blogging with Vim.</p>

<p>Octopress provides out-of-the-box support for Disqus commenting, recent Twitter tweets in the sidebar, Google Analytics, and a whole host of other added functionality.</p>

<h2 id="importing-content-from-wordpress">Importing Content from Wordpress</h2>

<p><img class="right" src="http://www.economyofeffort.com/media/images/wordpress-logo-small.png" /></p>

<p>My strategy for importing my Wordpress content into a Jekyll blog reolved around <a href="https://github.com/thomasf/exitwp">Exitwp</a>. Exitwp will parse a Wordpress export file and generate a Jekyll blog with the same content.</p>

<p>The Exitwp Github page has instructions for installing dependencies on Ubuntu, but on Homebrew on OS X, the commands were:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">$ brew install python
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">$ brew install pyyaml html2text beautifulsoup</div></div></pre></div></figure>

<p>(Important: make sure /usr/local/share/python is in $PATH.)</p>

<p>Next, I needed to go into my Wordpress admin page and generate a Wordpress export XML file. As of the time of this writing, this is done in Wordpress by logging in to the dashboard as an admin, and going to Tools -&gt; Export.</p>

<p>With the export XML file generated and on my desktop, I set Exitwp to work:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">$ python exitwp.py name-of-export-file.xml</div></div></pre></div></figure>

<p>One important thing to note: images require some handling. You can make Exitwp download your blog’s images by editing the Exitwp config.yaml file and setting…</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">download_images: True</div></div></pre></div></figure>

<p>… however, this will only download the image files. It will not edit the posts themselves to point to new image locations.</p>

<p>I did not relish the idea of going through all of my old posts and editing each of the image URLs. Instead, what I did was create a wp-content/uploads folder in my Octopress blog’s source/ folder, and copied the contents of wp-content/uploads from my Wordpress blog into there. Since I am hosting the new blog on the same domain, the result is that all of those image files will still be on the same URL. Having a wp-content folder inside my new blog is slightly ugly, but it solves the problem for now, and allows me to gradually move images over and edit image paths on old posts.</p>

<p>Also important to note: comments have to be dealt with separately, too. As a static site has no capacity for comment handling itself, comments on Jekyll/Octopress blogs are handled by <a href="http://www.disqus.com">Disqus</a>. Fortunately, in my case, I had already moved my Wordpress site to using Disqus commenting. For me, that meant that my comments would carry over to the new site, so long as my post URLs did not change. In my case, this meant making just a small tweak to the config file of the Jekyll blog once it was generated, so that the URL structure would mirror my old Wordpress site’s.</p>

<h2 id="setting-up-octopress">Setting up Octopress</h2>

<p><img class="right" src="http://www.economyofeffort.com/media/images/octopress-logo.png" /></p>

<p>After running Exitwp, I have my old blog exported into a raw Jekyll blog. But now, I have to get that blog into Octopress.</p>

<p>This part confused me for a while. It seems like something everyone else just glossed over.</p>

<p>For starters, I knew I wanted to store this blog in Git. The Octopress instructions would have me clone the Octopress repository, but I don’t want Octopress to be the origin on my blog repo. Instead, I did much like <a href="http://jphenow.com/docs/setup/">this blog post demonstrates</a> - I made my own blank repository, and I added the Octopress repo as a remote head.</p>

<p>So, now I had Git set up, and I had Octopress checked out locally by virtue of having run <code class="highlighter-rouge">git pull octopress master</code>. The part that wasn’t immediately obvious to me was how I was to take my Exitwp-generated Jekyll blog and put that in there.</p>

<p>Exitwp put my generated blog in exitwp/build/jekyll/blog-name. I copied the contents of this folder, and pasted it into octopress/source. Now, my Jekyll content was where it needed to be in Octopress.</p>

<p>To update my remote repo’s copy of the site, I check everything in, and run</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">$ git push origin master</div></div></pre></div></figure>

<p>And whenever I want to pull in the latest updates from Octopress, it’s</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">$ git pull octopress master</div></div></pre></div></figure>

<h2 id="deploying-to-heroku">Deploying to Heroku</h2>

<p><img class="left" src="http://www.economyofeffort.com/media/images/heroku-logo-light-300x100.png" />
Adding to the Git setup even more was the fact that I wanted to deploy this to <a href="http://www.heroku.com">Heroku</a>. For that setup, I basically followed <a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku">these instructions</a> starting at the “Deploy to Heroku” section. I had never deployed an app to Heroku, but it was very straightforward.</p>

<p>Since Heroku acts as a Git server, I could have skipped the part where I made my own repository host, and just cloned from Heroku whenever I wanted to access the repo on another machine. But I prefer having a copy of the site in my own Git hosting account (on Bitbucket, for the record), and it’s hardly any additional bother. My Bitbucket repo is on “origin”, the Octopress repo is on “octopress”, and Heroku is on “heroku”.</p>

<p>Whenever I want to push updates to deploy to Heroku, I simply do</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">$ git push heroku master</div></div></pre></div></figure>

<p>Finally, I set up Heroku to <a href="https://devcenter.heroku.com/articles/custom-domains">use my domain name</a>.</p>

<h2 id="what-i-think">What I Think</h2>

<p>I haven’t used Octopress for very long yet, but a few thoughts:</p>

<ul>
  <li>Writing posts in Vim and in Markdown syntax has made me realize how much of a drag using the Wordpress post editor was on my blog writing. I write code all day in Vim, and writing my blog posts there too is much less of a context switch. Flicking back and forth between Vim buffers is a lot less of a hassle. It makes offline blogging a lot easier, too.</li>
  <li>I never found a code formatting plugin for Wordpress that I did not hate. Octopress comes with code formatting styling out-of-the-box and it works very well. I’m not a huge fan of the Solarized theme it uses by default, and I may see about changing that in the future. But the important thing is that it works.</li>
  <li>Not having to worry about Wordpress updates is a big relief. I can’t say that I stayed on top of updates nearly as much as I needed to. And I don’t have to worry about database backups, either. There’s a “weight off my shoulders” feeling with making this move.</li>
  <li>There’s something comforting about having my entire blog history as a series of Markdown files, instead of posts locked away in a Wordpress database table in MySQL.</li>
  <li>There are a lot of neat Octopress plugins that I haven’t really delved into yet. But the default out-of-the-box experience is pretty much awesome. Even if, for now, my blog looks just like a bunch of other Octopress blogs.</li>
</ul>

<h2 id="tip-use-ifttt-to-tweet-new-posts">Tip: Use IFTTT to tweet new posts</h2>

<p><img class="right" src="http://www.economyofeffort.com/media/images/ifttt-logo.png" />
One of the plugins I used with Wordpress would add tweets to my Twitter feed, informing followers of new posts to the blog.</p>

<p>Without the server-side component, Octopress lacks this ability. However, thanks to the fact that Octopress generates an RSS feed file, we can use an external service to accomplish the same thing.</p>

<p><a href="http://www.ifttt.com">IFTTT</a> is a service that allows you to write “triggers” that perform various actions. In this case, I have IFTTT watching my blog’s RSS feed, and whenever it detects a new feed item, it makes a post to my Twitter, as well as one to my Facebook wall.</p>

<h2 id="tip-use-pow-on-os-x-for-easy-testing">Tip: Use Pow on OS X for easy testing</h2>

<p><img class="right" src="http://www.economyofeffort.com/media/images/pow-logo.png" width="200" />
By default, users can run <code class="highlighter-rouge">rake preview</code> to make Octopress spin up a web server at http://0.0.0.0:4000 and listen for changes to files to automatically rebuild the site for easy previewing.</p>

<p>This process can be made a little nicer with <a href="http://pow.cx/">Pow</a>, a handy little Rack webserver for OS X.</p>

<p>Just add a symlink your site folder in to ~/.pow/, and your system will run that site, and configure it to be reachable at http://symlink-name.dev. Then, run <code class="highlighter-rouge">rake watch</code> to make Octopress listen for changes and rebuild pages.</p>

<h2 id="gotcha-drafts-arent-imported-by-exitwp">Gotcha: Drafts aren’t imported by Exitwp</h2>

<p>I had accumulated many half-written posts in my Wordpress install over the years. Posts that I <em>totally</em> intend to finish.</p>

<p>Exitwp did not import these (or, more likely, the Wordpress export functionality did not include them in the export. I’m not sure which it is.)</p>

<p>I ended up fetching these manually.</p>

<h2 id="gotcha-zsh-and-square-bracket-commands">Gotcha: zsh and square bracket commands</h2>

<p>From that point on, I just followed the Octopress documentation to get up and running. I did, however, run into an annoying issue.</p>

<p>Octopress command-line commands often use square brackets, such as:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">$ rake new_post["My new post's title"]</div></div></pre></div></figure>

<p>Run it in zsh, though, and you get:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">$ rake new_post["My new post's title"]
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">zsh: no matches found: new_post[My new post's title]</div></div></pre></div></figure>

<p>The problem is that square brackets are a <a href="http://zsh.sourceforge.net/Doc/Release/Expansion.html#Filename-Generation">glob operator</a> in zsh. <a href="http://ryanarneson.com/blog/2012/04/07/rake-new-post-doesnt-work-with-zsh/">This blog post</a> pointed me in the right direction. The “solution” is to escape the square bracket characters.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">$ rake new_post\["My new post's title"\]</div></div></pre></div></figure>

<p>Alternately, zsh users can disable zsh’s GLOB option. From the Octopress Github issue on this problem, though, it sounds like some tweaks will be added to Octopress to address the issue.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://blog.pixelingene.com/2011/09/switching-to-the-octopress-blogging-engine/">Pixel Gene: Switching to the Octopress Blogging Engine</a></li>
  <li><a href="http://www.peterprovost.org/blog/2012/04/15/switching-the-blog-to-octopress">Peter Provost: Switching the Blog to Octopress</a></li>
  <li><a href="http://jphenow.com/docs/setup/">JPhenow: Octopress Setup</a></li>
  <li><a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku">Sam de Freyssinet: Get Blogging with Octopress on Heroku</a></li>
  <li><a href="http://ryanarneson.com/blog/2012/04/07/rake-new-post-doesnt-work-with-zsh/">Brain Dump: Octopress’ rake new_post Doesn’t Work with zsh</a></li>
  <li><a href="http://alexyoung.org/2009/07/09/new-blog/">alexyoung.org: Using Jekyll</a></li>
  <li><a href="http://instant-thinking.de/2012/05/08/tweeting-a-new-octopress-post-to-twitter/">Instant Thinking: Tweeting a new Octopress post to Twitter</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nitrous: My jailbreak's killer app]]></title>
    <link href="http://www.economyofeffort.com/2012/08/16/nitrous-my-jailbreaks-killer-app/"/>
    <updated>2012-08-16T15:58:00-07:00</updated>
    <id>http://www.economyofeffort.com/2012/08/16/nitrous-my-jailbreaks-killer-app</id>
    <content type="html"><![CDATA[<p>When Google released Chrome for iOS, initial excitement was tempered when users realized that, thanks to Apple’s restrictions, Chrome lacked Google’s V8 JavaScript engine. When you get down to it, Chrome in iOS is just a browsery widget wrapper around iOS UIWebViews.</p>

<p>Worse, because Chrome is not an Apple app, it does not take advantage of the Nitro JavaScript engine that is built into iOS and used by Apple apps like Safari.</p>

<p>Thankfully, jailbreaking iOS users can now add Nitro support to Chrome (and other apps) with the new Nitrous app on the Cydia store.</p>

<p>Nitrous adds a menu to the iOS Settings app, which allows users to selectively flag applications to use Nitro, thus allowing that app’s web views to perform as they do in mobile Safari.</p>

<p><img class="center" src="http://www.economyofeffort.com/media/images/nitrous-settings.png" /></p>

<p>Enabling Nitro on non-Safari web browsers is great enough, but it also allows enabling Nitro on other apps that make use of UIWebViews, such as client apps for Reddit, Twitter, and Facebook.</p>

<p>The following image from <a href="http://www.letsunlockiphone.com/nitrous-cydia-tweak-nitro-javascript-chrome-ios/">this post</a> demonstrates the performance improvement of Nitro in Chrome by running the SunSpider JavaScript performance test:</p>

<p><img class="center" src="http://www.economyofeffort.com/media/images/nitrous-sunspider.jpg" /></p>

<p>While it’s not quite the same thing as Chrome being able to include V8 in iOS Chrome, the ability to use Nitro in Chrome takes away one of the two major disadvantages Chrome has on iOS. (The other disadvantage - not being the default browser - can be solved with the Browser Chooser app, allowing users to elevate Chrome to the iOS default browser).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching with DuckDuckGo]]></title>
    <link href="http://www.economyofeffort.com/2012/08/14/searching-with-duckduckgo/"/>
    <updated>2012-08-14T19:21:00-07:00</updated>
    <id>http://www.economyofeffort.com/2012/08/14/searching-with-duckduckgo</id>
    <content type="html"><![CDATA[<p>1993 is considered to be the starting point of the commercial Internet. For those of us living in little farm towns in the San Joaquin Valley, however, it would not be until 1995 that the Internet came into our lives.</p>

<p>Weeks before the big opening of the local unlimited-use dial-up ISP, the local newspaper ran an article about the Internet and listed some websites to check out. Among the list was Infoseek, one of the first major search engines. There were a small army of search engines in those days that vied for attention: AltaVista, Excite, Lycos, WebCrawler, and of course, Yahoo. For me, though, Infoseek was my home on the Internet for the next 3 years.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/02/infoseek-crop.jpg" /></p>

<p>As detailed on Wikipedia’s brief <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Infoseek#History">History section for Infoseek</a>, the site peaked in 1997, was acquired by Disney in 1998 and merged with other Disney online properties <a href="http://news.cnet.com/Disney-and-Infoseek-raise-the-curtain-on-Go/2100-1023_3-219045.html">to form Go.com</a>, and by mid-1999, ceased to exist as its own site.</p>

<p>I remember the day Infoseek.com began redirecting to Go.com. The lean search engine pictured above was gone, and a late ’90s “portal” site was in its place. By that time, however, the folks on ZDTV (the original, superior version of TechTV) had long been cluing people in on a new search engine called Google.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/02/google.jpg" />
<small>Kids, this was what Google looked like when your parents started using it. At least if your parents were late ’90s geeks.</small></p>

<p>Google has been my search engine since the day Infoseek kicked over to Go.com. So, that’s almost 12 years now.</p>

<p>As of the past few months, however, I have been experimenting with another search engine. I’m not talking about Bing. I mean DuckDuckGo.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/02/duckduckgo.jpg" /></p>

<p>DuckDuckGo has many things going for it, to differentiate itself from Google.</p>

<p>The first is that DDG takes user privacy very seriously. Indeed, this is probably the main thing they use to separate themselves from Google, as evidenced by the <a href="http://donttrack.us/">donttrack.us</a> website and the Google-slapping billboard advertising the site:</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/02/ddg_billboard2-660x441.jpg" />
<small>DDG sticks it to Google with this San Francisco billboard and the donttrack.us website.</small></p>

<p>donttrack.us explains DDG’s privacy protection better than I can, so I won’t try to re-summarize it here. While I am not a privacy zealot, I do place some degree of value on increased privacy. I use ad-blockers, script-blockers, and other such privacy protecting browser extensions. I do consider DDG’s privacy handling an asset, although I am not going to freeze out Google or stop using Google’s non-search services (of which I use many) over their tracking. When it comes down to it, I will choose functionality over privacy protection, but I will make an effort to try and get both.</p>

<p>Privacy is about the only thing I ever hear brought up as to why one should use DDG. However, there is one feature that I think is a bigger deal: DDG’s <a href="https://duckduckgo.com/bang.html">!bang syntax</a>.</p>

<p>If you type a search query into DDG and include an exclamation point (commonly called a “bang”) along with a name/code known to DDG, it sends your search to that site’s search function, instead of searching DDG itself.</p>

<p>For example, if you enter “pink floyd !g” into DuckDuckGo…</p>

<p><img class="center" src="http://www.economyofeffort.com/media/images/duckduckgo.png" /></p>

<p>… you’ll be sent to the Google search results page for “pink floyd”:</p>

<p><img class="center" src="http://www.economyofeffort.com/media/images/google-pinkfloyd.png" /></p>

<p>Now I can hear you thinking, “why would you go to DDG to type a search meant for Google, instead of just going to Google in the first place?”. The answer is, I don’t actually go to a website to do my searching. Browsers like Chrome and Firefox have the ability to type a search into the browser directly (in the URL bar in Chrome and in Firefox if you use Foobar or Omnibar.</p>

<p>By setting my browser’s default search engine to DDG, I have direct access to many search engines from the browser bar, by using the !bang syntax.</p>

<ul>
  <li>I search the documentation of things like Rails, jQuery, etc. with !rails, !jquery, etc.</li>
  <li>I can search Amazon instantly with !amazon or even the shorter version, !a.</li>
  <li>Searching Reddit is !reddit  or !r. HackerNews is !hackernews or !hn.</li>
  <li>StackOverflow, ServerFault, and SuperUser are !so, !sf, and !su (or !stackoverflow, !serverfault, and !superuser).</li>
  <li>Google search is !g or !google, but the various sub-searches are available too. !gn for Google News search. !gi for Google Images.</li>
</ul>

<p>It is true that one can set up their browser to have search triggers like this, thus removing the need to funnel the search traffic through DDG. But using DDG means all of these search triggers are preconfigured. All I do is point my browser’s search bar to DDG.</p>

<p>Best of all, the !bang options are so intuitive that I never end up looking any of them up. I just try it out and almost 100% of the time, what I think the trigger would be is exactly what it is.</p>

<p>Now, the truth is, DuckDuckGo can’t go toe-to-toe with Google in terms of pure search result quality. A sizeable portion of my searches end up getting appended with the !g bang and sent to Google. That said, the effort required to still use Google in this way is minimal, and the benefit gained from having all the other !bang operators at my fingertips is well worth it. DDG’s results continue to get better, though, and I prefer having my searches go to DDG by default, and only selectively send some to Google.</p>

<p>To top it off, there are also a lot of other little <a href="https://duckduckgo.com/goodies.html">goodies</a> built into DDG. I particularly like the <a href="https://duckduckgo.com/tech.html">tech goodies</a>. I often enter “random password” into DDG to get a quick and easy 8-character random password.</p>

<p>Most of all, though, it’s the !bang syntax that has made DuckDuckGo stick for me. It has taken me some time to get into the habit of using certain !bang searches, but they’re always time savers once I get into that habit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Segfault after building Command-T plugin for Vim]]></title>
    <link href="http://www.economyofeffort.com/2012/08/13/segfault-after-building-command-t-plugin-for-vim/"/>
    <updated>2012-08-13T19:25:00-07:00</updated>
    <id>http://www.economyofeffort.com/2012/08/13/segfault-after-building-command-t-plugin-for-vim</id>
    <content type="html"><![CDATA[<p>The <a href="https://wincent.com/products/command-t">Command-T plugin</a> provides TextMate-style “go to file” searching for Vim.</p>

<p>It’s a very nice plugin. Part of the installation process involves building/compiling the plugin, as it is partially written in C.</p>

<p>I have twice encountered a situation where my Gvim would segfault when trying to launch, after having built the plugin.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">legion@legion-desktop:
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">~/.vim/bundle/command-t$ gvim
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">Vim: Caught deadly signal SEGV
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">Vim: Finished.
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">Segmentation fault</div></div></pre></div></figure>

<p>The problem was due to building the plugin using a different version of Ruby than the one that Gvim was built with. For me, this is because I was using the Gvim that comes with my Linux distribution (Ubuntu), but not the Ruby that comes included in the distro. Instead, I am running RVM and defaulting to a more current Ruby interpreter in my Bash environment.</p>

<p>The answer, for me, was to switch to the “system” Ruby in RVM, and then rebuild the plugin:</p>
<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">rvm --system
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">rake make</div></div></pre></div></figure>

<p>I also had this happen on my Mac laptop. Same basic situation: mismatch between the version of Ruby that my copy of MacVim was built with, and the version I was using in RVM. In that case, I believe I installed a new Ruby with RVM, one that matched the version that the particular MacVim build was built with.</p>

<p>To find out which version of Ruby that Vim/Gvim/MacVim was built with, use the command:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">:ruby p RUBY_VERSION</div></div></pre></div></figure>

<p>Then, if you don’t already have that version of Ruby in your OS, you can build a matching one from within RVM, and use that one to build the plugin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overclocking: Getting the Low-Hanging Fruit]]></title>
    <link href="http://www.economyofeffort.com/2012/05/27/overclocking-getting-the-low-hanging-fruit/"/>
    <updated>2012-05-27T06:43:11-07:00</updated>
    <id>http://www.economyofeffort.com/2012/05/27/overclocking-getting-the-low-hanging-fruit</id>
    <content type="html"><![CDATA[<p>I have started playing a game called Day Z (a mod for the game ArmA 2). I will write about this at a later time. One thing I will mention, though, is that ArmA 2 is a very CPU-demanding game. As a result, I found myself wanting to get some extra performance out of my system’s processor. I decided that I would overclock it, as I have done on many of my systems before.</p>

<p>One thing to understand about CPU production is that Intel and AMD don’t design completely separate cores for each CPU product they sell. Rather, they’ll make one CPU core and clock it at different speeds to make a range of products. What this means to overclockers is that it’s often trivially easy to buy a CPU from the low-end of that range, and overclock it to run at the speed of the high-end.</p>

<p>To be honest, this barely qualifies for “overclocking”. It’s more like removing an artificial restriction that makes the CPU run slower than the higher speeds of which it is capable. “Real” overclockers like to take CPUs and see just how far they can push those cores, way beyond the normal range that Intel or AMD are willing to clock those chips for wide production. Overclockers utilize more aggressive methods of keeping the chip cool, increase voltage beyond the stock levels, and other such tweaks to push a core to its maximum stable (or, sometimes, not-so-stable) limits.</p>

<p>This is not the level of overclocking that I participate in. I am simply interested in getting the low-hanging fruit. Taking a chip clocked at the low-end of the range of CPUs using the same core, and turning it up to the high-end, is a very easy way to spend less on a CPU and end up with the same level of performance. Sometimes, depending on how much cushion is left, a chip can go even higher relatively painlessly. (Intel/AMD don’t necessarily always max out a core’s capable range. Sometimes they simply move on to the next core.) When buying CPUs, I tend to buy on the low-end of the core’s range, knowing that I will probably have an easy overclock ahead of me if I need more CPU power.</p>

<p>My current system runs an AMD Phenom II x6 hex-core CPU. It’s the 1055T, giving it a stock clock of 2.8 GHz. The other chips that use the “Thuban” core that this one does run up to 3.3 GHz. What’s more, overclockers found it trivial to clock them up much higher - AMD definitely did not release any CPUs that reack the peak range of this core. So, I bought a nice big heatsink/fan combo (Cooler Master Hyper 212 Plus), replaced the crappy stock AMD heatsink, and clocked the chip up to 3.5 GHz. It’s a nice 700 MHz boost, yet overall it is still a very conservative overclock. With the new heatsink, my CPU temperatures are chilly cool (a good 15 Celsius cooler than they were at 2.8 GHz with the stock AMD fan), so I know heat is no factor. I hear 3.8 GHz is reasonably achievable, though with some slight voltage bumps. Nothing I’d be afraid of, but at this point, I start to reach diminishing returns. I have successfully picked the low-hanging fruit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error building Ruby 1.8.7 with rbenv/ruby-install on Linux with glibc >= 2.14]]></title>
    <link href="http://www.economyofeffort.com/2012/05/10/error-building-ruby-1-8-7-with-rbenvruby-install-on-linux-with-glibc-2-14/"/>
    <updated>2012-05-10T07:26:47-07:00</updated>
    <id>http://www.economyofeffort.com/2012/05/10/error-building-ruby-1-8-7-with-rbenvruby-install-on-linux-with-glibc-2-14</id>
    <content type="html"><![CDATA[<p>If you’re using rbenv and ruby-build on a Linux that has updated to glibc 2.14 or newer, you may have encountered an error like this when attempting to build an older version of MRI:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">$ rbenv install 1.8.7-p357 rbenv: 1.9.3-p194
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">    Downloading http://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7-p357.tar.gz...
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    Installing ruby-1.8.7-p357...
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">    BUILD FAILED
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">    Inspect or clean up the working tree at /tmp/ruby-build.20120508145707.21228
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">    Results logged to /tmp/ruby-build.20120508145707.21228.log
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">    Last 10 log lines:
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">    callback.func:79:24: error: ‘proc’ undeclared here (not in a function)
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">    callback.func:79:39: error: ‘argc’ undeclared here (not in a function)
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">    callback.func:79:45: error: ‘argv’ undeclared here (not in a function)
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">    callback.func:82:1: error: expected identifier or ‘(’ before ‘&#x7d;’ token
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line">    dl.c:106:1: error: expected ‘;’, ‘,’ or ‘)’ before ‘static’
</div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line">    cp ../.././ext/dl/lib/dl/import.rb ../../.ext/common/dl
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line">    make[1]: *** [dl.o] Error 1
</div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line">    make[1]: *** Waiting for unfinished jobs....
</div></div><div data-line="19" class="code-highlight-row numbered"><div class="code-highlight-line">    make[1]: Leaving directory `/tmp/ruby-build.20120508145707.21228/ruby-1.8.7-p357/ext/dl'
</div></div><div data-line="20" class="code-highlight-row numbered"><div class="code-highlight-line">    make: *** [all] Error 1</div></div></pre></div></figure>

<p>The issue isn’t specific to ruby-build or rbenv, but rather is an issue with <a href="http://bugs.ruby-lang.org/issues/5108">building Ruby after upgrading glibc to 2.14</a>:</p>

<blockquote>
  <p>This is caused by the fact that the generated file callback.func is corrupt. The corruption is triggered by a recent glibc change:</p>
</blockquote>

<p><a href="http://sourceware.org/git/?p=glibc.git;a=commitdiff;h=glibc-2.13-161-gfcabc0f">http://sourceware.org/git/?p=glibc.git;a=commitdiff;h=glibc-2.13-161-gfcabc0f</a></p>

<p>which was to fix a POSIX compatibility issue:</p>

<p><a href="http://sourceware.org/bugzilla/show_bug.cgi?id=12724">http://sourceware.org/bugzilla/show_bug.cgi?id=12724</a></p>

<p>Patches are provided to manually patch the Ruby source before building, but what if you’re using something like rbenv and ruby-install, instead of building Ruby manually?</p>

<p><a href="https://gist.github.com/2159108">This Gist</a>, from GitHub user kungfoo, provides a ruby-build definition for building Ruby 1.8.7-p358 with the required patch for building on a system with the updated glibc.</p>

<p>To date, I had only used rbenv and ruby-build to build Rubies from ruby-build’s included definitions. Turns out, it’s quite easy to use this definition, once I realized that that’s what this was.</p>

<p>Simply do the following:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ vim /tmp/1.8.7-p358-with-rogue-stdout-patch
... paste contents of Gist into file, save and exit ...
$ rbenv install /tmp/1.8.7-p358-with-rogue-stdout-patch
</code></pre>
</div>

<p>Note, the filename will be the name that rbenv uses to identify this Ruby, so if you don’t want the name to be “1.8.7-p358-with-rogue-stdout-patch”, name the file to match the name you prefer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pauses/hanging in Thunderbird in Linux with Lightning]]></title>
    <link href="http://www.economyofeffort.com/2012/04/09/pauses-hanging-in-thunderbird-in-linux-with-lightning/"/>
    <updated>2012-04-09T06:30:31-07:00</updated>
    <id>http://www.economyofeffort.com/2012/04/09/pauses-hanging-in-thunderbird-in-linux-with-lightning</id>
    <content type="html"><![CDATA[<p>I was experiencing some very annoying pauses &amp; hangs in Thunderbird in Linux. The application would hang when launching, and periodically while open as well. CPU and RAM usage were not spiking, but the process status would show up in <em>top</em> as D (uninterruptible sleep - usually IO, according to the <em>ps</em> manpage).</p>

<p>I tracked down the issue as being related to the Lightning calendaring extension. Lightning has an option for caching calendar entries for remote calendars. This <em>seems</em> like it would be a feature that improves performance, but as it turned out, it caused a lot of app-stalling IO. Each remote calendar has a Cache checkbox in its settings. Unchecking this immediately put an end to the pausing issues.</p>

<p>What clued me in was <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=576017">this bug report</a>, which is almost 2 years old and still “unconfirmed”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing slow Vim auto-completion with Ruby files]]></title>
    <link href="http://www.economyofeffort.com/2012/03/01/fixing-slow-vim-auto-completion-with-ruby-files/"/>
    <updated>2012-03-01T12:48:30-08:00</updated>
    <id>http://www.economyofeffort.com/2012/03/01/fixing-slow-vim-auto-completion-with-ruby-files</id>
    <content type="html"><![CDATA[<p>I’ve been a happy Vim user for a little while now. With the exception of Objective-C for iOS development (too much of a pain without Xcode’s completion), I’ve been writing all of my code in Vim.</p>

<p>However, I have not been making use of Vim’s auto-completion features, due to a serious performance issue when used with Ruby files. Completion was painfully slow. It was annoying when triggering completion manually, but it was a complete show-stopper when used with an automatic completion plugin like NeoComplCache.</p>

<p>Finally, I got a clue from <a href="http://stackoverflow.com/questions/2169645/vims-autocomplete-is-excruciatingly-slow/4277400#4277400">this StackOverflow response</a>:</p>

<blockquote>
  <p>Had a very similar problem since upgrading to Vim 7.3 (from 7.2): I was using the (excellent) ACP plugin and in longer source files (C-files, 1700 LOC), the popup took ages to jump through the suggestions when I was editing near the bottom of the file.</p>
</blockquote>

<p>Using the PerformanceValidator (from Softwareverify), I found out that some fold methods were called again and again and lead to very high processor load and slow completion.</p>

<p>My workaround was to set the foldmethod (fdm) to manual. And this solved it…</p>

<p>Now, I was having issues with fairly short Ruby files, as opposed to the large C files that this responder was editing. However, it clued me in to the fact that foldmethod was getting called a lot during auto-completion, and led me to experiment.</p>

<p>Finally, I found the issue:</p>

<p><strong>foldmethod=syntax is dog-ass slow when editing Ruby syntax files.</strong></p>

<p>As soon as I switch to any other foldmethod, Ruby auto-completion becomes instant. I’ve been using foldmethod=indent, which creates folds based on code indent levels. This seems to work as well for me as syntax-aware folding did.</p>

<p>Hopefully that tip helps out anyone else who found Vim auto-completion strangely non-performant while working with Ruby files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Battlefield 3: Get out of my way!]]></title>
    <link href="http://www.economyofeffort.com/2011/11/03/battlefield-3-get-out-of-my-way/"/>
    <updated>2011-11-03T05:02:29-07:00</updated>
    <id>http://www.economyofeffort.com/2011/11/03/battlefield-3-get-out-of-my-way</id>
    <content type="html"><![CDATA[<p>Dear Battlefield 3,</p>

<p><img src="http://www.economyofeffort.com/wp-content/uploads/2011/11/bf3.jpg" alt="" /></p>

<p><strong>Yes, I know I’m in a Conquest checkpoint’s capture radius!</strong> The little map in the corner that’s got a big box next to me kind of gave that fact away.</p>

<p>Now will you please <strong>get the mother-fudge out of the way?</strong> I am trying to look at things where you’ve got your big obnoxious indicator.</p>
]]></content>
  </entry>
  
</feed>
