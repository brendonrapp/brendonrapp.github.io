<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Economy of Effort]]></title>
  <link href="http://brendonrapp.github.io/atom.xml" rel="self"/>
  <link href="http://brendonrapp.github.io/"/>
  <updated>2014-07-20T02:30:40-07:00</updated>
  <id>http://brendonrapp.github.io/</id>
  <author>
    <name><![CDATA[Brendon Rapp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixed the Archive Page]]></title>
    <link href="http://brendonrapp.github.io/2014/07/20/fixed-the-archive-page/"/>
    <updated>2014-07-20T02:18:00-07:00</updated>
    <id>http://brendonrapp.github.io/2014/07/20/fixed-the-archive-page</id>
    <content type="html"><![CDATA[<p>Finally got around to fixing the Archive page on this site.</p>

<p>If I recall correctly, what happened originally is that I was attempting to get rid of the &ldquo;/blog/&rdquo; part of the archive path, but got distracted halfway through and left it incomplete.</p>

<p>For reference: this part of the archive path is not a user-configurable part of Octopress per se. It is a default location for a file in Jekyll, which is in <code>source/blog/archive</code> in an Octopress site repository. Simply moving the <code>archive/</code> folder out of <code>blog/</code> and into the top level of <code>source/</code> will make the archive page generate without the &ldquo;/blog/&rdquo; part of the page. (For further reference, see <a href="https://github.com/imathis/octopress/issues/464#issuecomment-5587568">the workaround post</a> on the <a href="https://github.com/imathis/octopress/issues/464">issue on Github</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim tricks for Ruby hashes]]></title>
    <link href="http://brendonrapp.github.io/2014/07/09/vim-tricks-for-ruby-hashes/"/>
    <updated>2014-07-09T19:59:00-07:00</updated>
    <id>http://brendonrapp.github.io/2014/07/09/vim-tricks-for-ruby-hashes</id>
    <content type="html"><![CDATA[<p>I have a couple of functions in my .vimrc for manipulating Ruby hashes.</p>

<p>The first one is to convert hashes from Ruby 1.8 style into Ruby 1.9+ style, eg.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># before</span>
</span><span class='line'><span class="ss">:symbol_key</span> <span class="o">=&gt;</span> <span class="s1">&#39;value&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># after</span>
</span><span class='line'><span class="n">symbol_key</span><span class="p">:</span> <span class="s1">&#39;value&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I create this function for both Normal and Visual modes to allow updating either a selected hash, or the entire file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> RubyHashesAll<span class="p">()</span>
</span><span class='line'>  :%<span class="k">s</span><span class="sr">/:\([^ ]*\)\(\s*\)=&gt;/</span>\<span class="m">1</span>:/ge
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> RubyHashesSelected<span class="p">()</span>
</span><span class='line'>  :<span class="s1">&#39;&lt;,&#39;</span><span class="p">&gt;</span><span class="k">s</span><span class="sr">/:\([^ ]*\)\(\s*\)=&gt;/</span>\<span class="m">1</span>:/ge
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>rhh :<span class="k">call</span> RubyHashesAll<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>vmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>rhh :<span class="k">call</span> RubyHashesSelected<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I have one for taking a hash and extracting an array of the hash keys.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># before</span>
</span><span class='line'><span class="p">{</span> <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="n">two</span><span class="p">,</span> <span class="ss">:three</span> <span class="o">=&gt;</span> <span class="s1">&#39;four&#39;</span><span class="p">,</span> <span class="ss">five</span><span class="p">:</span> <span class="mi">6</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># after</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="ss">:three</span><span class="p">,</span> <span class="ss">:five</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, I have the command bound only in Visual mode, as I don&rsquo;t see a case where I&rsquo;d want to do this globally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> RubyExtractHashKeys<span class="p">()</span>
</span><span class='line'>  :<span class="s1">&#39;&lt;,&#39;</span><span class="p">&gt;</span><span class="k">s</span><span class="sr">/\([:&#39;&quot;]\?[a-zA-Z]\+[&#39;&quot;]\?\)\s*=&gt;[^,}]\+\([,}]\)/</span>\<span class="m">1</span>\<span class="m">2</span>/ge
</span><span class='line'>  :<span class="s1">&#39;&lt;,&#39;</span><span class="p">&gt;</span><span class="k">s</span><span class="sr">/\([a-zA-Z]\+\)[:]\s*[^,}]\+\([,}]\)/</span>:\<span class="m">1</span>\<span class="m">2</span>/ge
</span><span class='line'>  :<span class="s1">&#39;&lt;,&#39;</span><span class="p">&gt;</span><span class="k">s</span><span class="sr">/{\s*/</span>\[/ge
</span><span class='line'>  :<span class="s1">&#39;&lt;,&#39;</span><span class="p">&gt;</span><span class="k">s</span><span class="sr">/\s*}/</span>\]/ge
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'>vmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>rhe :<span class="k">call</span> RubyExtractHashKeys<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The regexes can probably be improved to fix some edge cases, and I&rsquo;m certain there&rsquo;s a way in Vim to make it so that I don&rsquo;t have to define the All and Selected versions of RubyHashes as separate functions. But these do the job for me now, until I reach a higher plane of Vim mastery.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zsh, tmux, vim, and 256 color madness]]></title>
    <link href="http://brendonrapp.github.io/2014/07/04/zsh/"/>
    <updated>2014-07-04T21:20:00-07:00</updated>
    <id>http://brendonrapp.github.io/2014/07/04/zsh</id>
    <content type="html"><![CDATA[<p><strong>tl;dr: You want $TERM to be <code>screen-256color</code> when tmux is running, and you want it to be <code>xterm-256color</code> when tmux is <em>not</em> running. Also, launch tmux with <code>-2</code> argument.</strong></p>

<p>I love <a href="https://wiki.archlinux.org/index.php/Tmux">tmux</a>. It is the primary reason why I switched from using gVim to console vim. I love having a fully terminal-based workflow. It beats switching between a GUI editor app and terminal window any day.</p>

<p>This switch, however, was not without some issues. Here are the solutions to two that I encountered.</p>

<h3>Weirdness with zsh, tmux, and vim</h3>

<h4>Problems:</h4>

<ul>
<li>when $TERM is <code>screen-256color</code> but tmux is <em>not</em> running, zsh will echo your command into the output when you hit Enter:</li>
</ul>


<p><img src="http://brendonrapp.github.io/media/images/screen-256color-no-tmux.png" alt="" /></p>

<p>Notice how the output of the &ldquo;ls&rdquo; and &ldquo;echo&rdquo; commands repeat themselves in the output stream as soon as I switched to <code>screen-256color</code>.</p>

<ul>
<li>when $TERM is <code>xterm-256color</code> while tmux is running, colors will not display properly in Vim:</li>
</ul>


<p style="text-align:left !important;"><code>vim /etc/default/grub</code> while <code>TERM=screen-256color</code>:</p>


<p><img src="http://brendonrapp.github.io/media/images/tmux-vim-screen-256color.png" alt="" /></p>

<p style="text-align:left !important;"><code>vim /etc/default/grub</code> while <code>TERM=xterm-256color</code>:</p>


<p><img src="http://brendonrapp.github.io/media/images/tmux-vim-xterm-256color.png" alt="" /></p>

<h4>Solution:</h4>

<p>In my zsh config (~/.zshrc), I set xterm-256color to be the default TERM, but right after that, added a command that would re-export TERM as screen-256color if tmux is running:</p>

<pre><code>export TERM=xterm-256color
[ -n "$TMUX" ] &amp;&amp; export TERM=screen-256color
</code></pre>

<h3>No Vim colorschemes when tmux is launched by terminal app in place of shell</h3>

<h4>Problem:</h4>

<p>I ran into a specific set of circumstances where my Vim colorscheme would not display.</p>

<p>Terminal applications usually launch a shell by default, but some (like gnome-terminal) have the option of defining a command to be run rather instead of the shell.</p>

<p>If I set this command to <code>tmux</code>, tmux would indeed launch. However, if I then ran Vim, the colorscheme would not display correctly.</p>

<p>However, if I allowed gnome-terminal to launch a shell, and then ran <code>tmux</code> myself from that shell, Vim would display properly within that tmux session.</p>

<h4>Solution:</h4>

<p>I got my clue from <a href="http://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode">this StackOverflow post</a>. Basically, what is happening is that, when running <code>tmux</code> from within my shell, which is configured for 256 colors, tmux would launch in 256 color mode. But when I had gnome-terminal launch tmux directly, it would not.</p>

<p>The easy way around this was to use the &ldquo;-2&rdquo; argument for tmux, making the command <code>tmux -2</code>.</p>

<p><img src="http://brendonrapp.github.io/media/images/gnome-terminal-auto-tmux.png" alt="" /></p>

<p>With that command in place, tmux launches whenever firing up gnome-terminal, and does so in 256 color mode.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Careful What You Name Your Rails Partials]]></title>
    <link href="http://brendonrapp.github.io/2013/08/03/careful-what-you-name-your-rails-partials/"/>
    <updated>2013-08-03T15:53:00-07:00</updated>
    <id>http://brendonrapp.github.io/2013/08/03/careful-what-you-name-your-rails-partials</id>
    <content type="html"><![CDATA[<p><strong>tl;dr: Hyphens bad.</strong></p>

<p>I encountered a strange bug in Rails 3.2.13 this week. I kept getting an error that traced back to the very start of a partial:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_example-partial-logged-in.html.haml:1: syntax error, unexpected keyword_in, expecting keyword_end</span></code></pre></td></tr></table></div></figure>


<p>I tracked it down to <a href="https://github.com/rails/rails/issues/7079">this issue</a>, which pointed out that the error was related to the hyphenated name ending with a Ruby reserved word.</p>

<p>By convention, Rails uses underscores for word separation in file names. Hyphens are not completely disallowed (the above works if I rename the file to end with a non-reserve word), but can lead to issues.</p>

<p>The issue linked above contains a pull request for a better error message, which was merged into Rails 4. But for those still on Rails 3 and earlier, if you see this vague error message, now you know why.</p>

<p><img class="center" src="http://brendonrapp.github.io/media/images/hyphen.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reattach-to-user-namespace: The Fix For Your tmux in OS X Woes]]></title>
    <link href="http://brendonrapp.github.io/2013/07/29/reattach-to-user-namespace-the-fix-for-your-tmux-in-os-x-woes/"/>
    <updated>2013-07-29T17:21:00-07:00</updated>
    <id>http://brendonrapp.github.io/2013/07/29/reattach-to-user-namespace-the-fix-for-your-tmux-in-os-x-woes</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://brendonrapp.github.io/media/images/tmux-osx.jpg"></p>

<p><strong>tl;dr: Things not behaving right in tmux on OS X? Install reattach-to-user-namespace</strong></p>

<p>Are you a tmux + Mac OS X user? Have you had any of the following problems?</p>

<ul>
<li>Running <code>launchctl</code> to start services fails with a message like <code>launch_msg(): Socket is not connected</code></li>
<li>Using the OS X Pasteboard commands <code>pbcopy</code> and <code>pbpaste</code> and having them not work</li>
<li>Launching a GUI app from the terminal and getting a &ldquo;ghost window&rdquo;: the app window loads in the background, with no dock icon, cannot be Command-Tab&rsquo;d to, and the app&rsquo;s menu does not populate the top bar when the window gains focus</li>
</ul>


<p>Why does this happen? Chris Johnsen has some <a href="https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard">details</a>&hellip;</p>

<blockquote><p><em>tmux</em> uses the <em>daemon(3)</em> library function when starting its server process. In Mac OS X 10.5, Apple changed <em>daemon(3)</em> to move the resulting process from its original bootstrap namespace to the root bootstrap namespace. This means that the <em>tmux</em> server, and its children, will automatically and uncontrollably lose access to what would have been their original bootstrap namespace (i.e. the one that has access to the pasteboard service).</p></blockquote>

<p>It turns out that Apple has patched the version of GNU screen that they distribute with OS X to avoid this problem. But this is 2013, and we UNIX geeks have moved on to tmux, right? Chris goes on in that README to explain why porting Apple&rsquo;s screen patch to tmux would be tricky.</p>

<p>So, instead, he provides the <em>reattach-to-user-namespace</em> wrapper program. This allows us to launch a process and have that process be attached to the per-user bootstrap namespace, which, to put it simply, makes the program behave as we are expecting.</p>

<p>The &ldquo;trick&rdquo; is to configure tmux to launch its shells with the <em>reattach-to-user-namespace</em> wrapper. By doing that, the shells tmux launches, as well as everything those shells launch, will be attached to the user namespace, and the problems listed at the top of this post will no longer be issues. We can use the <code>default-command</code> option in ~/.tmux.conf to wrap our shell launching command.</p>

<p>First, we need to install <em>reattach-to-user-namespace</em>. If you use Homebrew or MacPorts, this is as easy as:</p>

<pre><code>; with Homebrew
$ brew install reattach-to-user-namespace

; with MacPorts
$ port install tmux-pasteboard
</code></pre>

<p>I use the same dotfiles for Linux as well as OS X, so I only want to do this in the OS X environment. I accomplish this with the following:</p>

<figure class='code'><figcaption><span>~/.tmux.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; at the end of the file</span>
</span><span class='line'><span class="k">if</span><span class="p">-</span><span class="k">shell</span> <span class="s1">&#39;test &quot;$(uname)&quot; = &quot;Darwin&quot;&#39;</span> <span class="s1">&#39;source ~/.tmux-osx.conf&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>~/.tmux-osx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span><span class="p">-</span><span class="k">option</span> <span class="p">-</span><span class="k">g</span> default<span class="p">-</span>command <span class="s2">&quot;reattach-to-user-namespace -l zsh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you only use OS X, you can skip creating an external file, and just put the set-option line directly in your ~/.tmux.conf. Also, I am using zsh, so my command to <em>reattach-to-user-namespace</em> is zsh. If you&rsquo;re using a different shell, change that to your shell&rsquo;s name.</p>

<p>With this configuration in place, kill and re-launch tmux. The shells that tmux launches should now get attached to the user namespace, and namespace-related issues should be resolved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Numpads]]></title>
    <link href="http://brendonrapp.github.io/2013/07/26/no-numpads/"/>
    <updated>2013-07-26T19:20:00-07:00</updated>
    <id>http://brendonrapp.github.io/2013/07/26/no-numpads</id>
    <content type="html"><![CDATA[<p>My mother is an accountant. Walk by her office on any given day, and you&rsquo;ll likely hear the mechanical sounds of an accounting calculator printing its results to a stream of paper.</p>

<p><img class="center" src="http://brendonrapp.github.io/wp-content/uploads/2010/12/calculator.jpg" width="350" height="263"></p>

<p>I used to make fun of the endless <em>crunch-crunch-crunch</em> sound that echoed down the hallways.  These days, she tells me, the ol&#8217; hand calculator doesn&rsquo;t get quite as much use as before. More and more of the accounting business is computerized.</p>

<p>It comes as little surprise. Computers were invented to crunch numbers. When computers became machines that fit on a desktop, the &ldquo;killer apps&rdquo; were all about numbers: the first two applications named in Wikipedia&rsquo;s <a href="http://en.wikipedia.org/wiki/Killer_application">entry for killer applications</a> are Visicalc and Lotus 1-2-3.</p>

<p>Accordingly, it did not take long for personal computer manufacturers to take inspiration from those hand calculators and add the number pad to the right of the typewriter key layout.</p>

<p><img class="center" src="http://brendonrapp.github.io/wp-content/uploads/2010/12/Terminal-dec-vt100.jpg" width="499" height="391"> Personal computers, however, have moved well beyond the domain of the office desktop. Indeed, for most people, the computer is no longer thought of as a device for performing calculations. They are used for communication, and for accessing and storing data. I don&rsquo;t have data to back it up, but I would wager that most computer users don&rsquo;t punch in long sequences of numbers regularly.</p>

<p>And yet, while the computer has evolved, the number pad remains. Like the wings of a flightless bird. the vestigal number pad sits unused, eating up space on millions of desktops.</p>

<p>Oh sure, you use the number pad, you say. And perhaps you do. But do you really use it enough to dedicate 6 inches of desk width for it? More to the point, does <em>every</em> computer user? People are <a href="http://news.cnet.com/8301-31021_3-20005908-260.html">buying laptops and netbooks</a> for their computing devices more and more, and I don&rsquo;t ever hear people complaining about how much they miss the numpad.</p>

<p>And yet, the vast majority of keyboards for sale include the numpad. Finding keyboards without them takes some effort.</p>

<p>One of the few I became aware of when starting the search was the Happy Hacking Keyboard Lite.</p>

<p><img class="center" src="http://brendonrapp.github.io/wp-content/uploads/2011/02/hhkb-lite.jpg"></p>

<p>It&rsquo;s a nice, small deck. It uses a &ldquo;UNIX&rdquo; keyboard layout, like the ones on the old Sun boxes in one of the computer labs back at university.</p>

<p>Apple has come around on the idea of ditching the numpad. New iMacs come with a wireless keyboard that has no numpad.</p>

<p><img class="center" src="http://brendonrapp.github.io/media/images/imac.jpg"></p>

<p>I considered picking up one of these. And I actually did pick up a couple of Apple&rsquo;s discontinued wired USB tenkeyless keyboards.</p>

<p><img class="center" src="http://brendonrapp.github.io/media/images/apple-compact-keyboard.jpg"></p>

<p>They&rsquo;re not bad as spare keyboards to have around, but they were not going to be my primary keyboard. (My wife is using one on her desktop machine, though).</p>

<p>One keyboard I really want is the 84-key &ldquo;Space Saving&rdquo; version of the IBM Model M.</p>

<p><img class="center" src="http://brendonrapp.github.io/wp-content/uploads/2010/12/spacesaver1280-300x203.jpg"> Sadly, they are awfully hard to come by. I watch for them on <a href="http://www.clickykeyboards.com">clickykeyboards.com</a> but it&rsquo;s just an endless list of <span style="color: #ff0000;"><strong>SOLD</strong></span> boards.</p>

<p>But the keyboard that ended my search was the <a href="http://elitekeyboards.com/products.php?sub=leopold,tenkeyless&amp;pid=fc200rtab">Leopold Tenkeyless Tactile Touch</a> from EliteKeyboards. It combined my desire for a compact no-numpad keyboard with the desire to have a mechanical keyboard.</p>

<p><img class="center" src="http://brendonrapp.github.io/media/images/leopold.jpg"></p>

<p>It&rsquo;s been a couple of years now since I bought this keyboard, and while the idea of spending $100 on a keyboard was a tough pill to swallow at the time, I would not hesitate to do it again. The compact size make life nicer on my desk, and the action of the mechanical key switches is so much more enjoyable than mashing the rubber dome switches on a non-mechanical keyboard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye Wordpress, Hello Octopress]]></title>
    <link href="http://brendonrapp.github.io/2012/08/17/goodbye-wordpress/"/>
    <updated>2012-08-17T17:32:00-07:00</updated>
    <id>http://brendonrapp.github.io/2012/08/17/goodbye-wordpress</id>
    <content type="html"><![CDATA[<p>I have been running this blog on Wordpress since 2005. Back then, Wordpress was purely a blogging engine.</p>

<p>In the years since then, Wordpress has grown into something more akin to a CMS built around a blogging engine. At work, we have used it as such for a couple of <a href="http://www.luckydogsbakery.com">small</a> <a href="http://www.warginwines.com">storefronts</a>, built around the blog and the Wordpress e-Commerce shopping cart plugin.</p>

<p><img class="right" src="http://brendonrapp.github.io/media/images/wordpress-world-problems.jpg" width="300">
Maintaining a full Wordpress installation for my personal blog, however, had become cumbersome. Particularly so since I am not running any other PHP code for personal projects. At <a href="http://www.lonestarrubyconf.com/">Lone Star Ruby Conference</a>, <a href="https://speakerdeck.com/u/techpeace/p/front-end-web-development-with-ruby">one of the talks</a> finally convinced me that it was time to leave Wordpress behind, and to go with a static site compiled blog engine. I had previous experience with a static site compiler, nanoc, which we use at work for creating static websites. A more blog-aware tool that works similarly held plenty of appeal to me.</p>

<p>I also no longer wished to run this site on hosting that costs me money. I started with shared hosts like Dreamhost, graduated to a Linode VPS (more for experimenting with VPS hosting than for any actual traffic needs), and most recently ditched the VPS and hosted on NearlyFreeSpeech&rsquo;s low-cost pay-as-you-use hosting. But for how low traffic the site is, paying even what I give to NearlyFreeSpeech seemed unnecessary. Heroku&rsquo;s free single web dyno was staring me in the face, offering more than enough hosting power for a static version of my site, for $0.</p>

<h2>Introducing Jekyll and Octopress</h2>

<p><img class="right" src="http://brendonrapp.github.io/media/images/jekyll-doctor.jpg" width="300"></p>

<p><a href="https://github.com/imathis/octopress/">Octopress</a> is a framework built around the Jekyll blogging engine. It provides various plugins and extensions, as well as a nice default theme, to make blogging on Jekyll a nice out-of-the-box experience.</p>

<p>Jekyll allows users to write blog posts in <a href="http://daringfireball.net/projects/markdown/syntax/">Markdown</a> and compile them into static HTML pages. Instead of writing posts in a web-based panel, posts are created by adding a new Markdown file in the _posts folder, and writing the post in there using the user&rsquo;s editor of choice. Finally, I am blogging with Vim.</p>

<p>Octopress provides out-of-the-box support for Disqus commenting, recent Twitter tweets in the sidebar, Google Analytics, and a whole host of other added functionality.</p>

<h2>Importing Content from Wordpress</h2>

<p><img class="right" src="http://brendonrapp.github.io/media/images/wordpress-logo-small.png"></p>

<p>My strategy for importing my Wordpress content into a Jekyll blog reolved around <a href="https://github.com/thomasf/exitwp">Exitwp</a>. Exitwp will parse a Wordpress export file and generate a Jekyll blog with the same content.</p>

<p>The Exitwp Github page has instructions for installing dependencies on Ubuntu, but on Homebrew on OS X, the commands were:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install python
</span><span class='line'>$ brew install pyyaml html2text beautifulsoup</span></code></pre></td></tr></table></div></figure>


<p>(Important: make sure /usr/local/share/python is in $PATH.)</p>

<p>Next, I needed to go into my Wordpress admin page and generate a Wordpress export XML file. As of the time of this writing, this is done in Wordpress by logging in to the dashboard as an admin, and going to Tools &ndash;> Export.</p>

<p>With the export XML file generated and on my desktop, I set Exitwp to work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python exitwp.py name-of-export-file.xml</span></code></pre></td></tr></table></div></figure>


<p>One important thing to note: images require some handling. You can make Exitwp download your blog&rsquo;s images by editing the Exitwp config.yaml file and setting&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>download_images: True</span></code></pre></td></tr></table></div></figure>


<p>&hellip; however, this will only download the image files. It will not edit the posts themselves to point to new image locations.</p>

<p>I did not relish the idea of going through all of my old posts and editing each of the image URLs. Instead, what I did was create a wp-content/uploads folder in my Octopress blog&rsquo;s source/ folder, and copied the contents of wp-content/uploads from my Wordpress blog into there. Since I am hosting the new blog on the same domain, the result is that all of those image files will still be on the same URL. Having a wp-content folder inside my new blog is slightly ugly, but it solves the problem for now, and allows me to gradually move images over and edit image paths on old posts.</p>

<p>Also important to note: comments have to be dealt with separately, too. As a static site has no capacity for comment handling itself, comments on Jekyll/Octopress blogs are handled by <a href="http://www.disqus.com">Disqus</a>. Fortunately, in my case, I had already moved my Wordpress site to using Disqus commenting. For me, that meant that my comments would carry over to the new site, so long as my post URLs did not change. In my case, this meant making just a small tweak to the config file of the Jekyll blog once it was generated, so that the URL structure would mirror my old Wordpress site&rsquo;s.</p>

<h2>Setting up Octopress</h2>

<p><img class="right" src="http://brendonrapp.github.io/media/images/octopress-logo.png"></p>

<p>After running Exitwp, I have my old blog exported into a raw Jekyll blog. But now, I have to get that blog into Octopress.</p>

<p>This part confused me for a while. It seems like something everyone else just glossed over.</p>

<p>For starters, I knew I wanted to store this blog in Git. The Octopress instructions would have me clone the Octopress repository, but I don&rsquo;t want Octopress to be the origin on my blog repo. Instead, I did much like <a href="http://jphenow.com/docs/setup/">this blog post demonstrates</a> &ndash; I made my own blank repository, and I added the Octopress repo as a remote head.</p>

<p>So, now I had Git set up, and I had Octopress checked out locally by virtue of having run <code>git pull octopress master</code>. The part that wasn&rsquo;t immediately obvious to me was how I was to take my Exitwp-generated Jekyll blog and put that in there.</p>

<p>Exitwp put my generated blog in exitwp/build/jekyll/blog-name. I copied the contents of this folder, and pasted it into octopress/source. Now, my Jekyll content was where it needed to be in Octopress.</p>

<p>To update my remote repo&rsquo;s copy of the site, I check everything in, and run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<p>And whenever I want to pull in the latest updates from Octopress, it&rsquo;s</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git pull octopress master</span></code></pre></td></tr></table></div></figure>


<h2>Deploying to Heroku</h2>

<p><img class="left" src="http://brendonrapp.github.io/media/images/heroku-logo-light-300x100.png">
Adding to the Git setup even more was the fact that I wanted to deploy this to <a href="http://www.heroku.com">Heroku</a>. For that setup, I basically followed <a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku">these instructions</a> starting at the &ldquo;Deploy to Heroku&rdquo; section. I had never deployed an app to Heroku, but it was very straightforward.</p>

<p>Since Heroku acts as a Git server, I could have skipped the part where I made my own repository host, and just cloned from Heroku whenever I wanted to access the repo on another machine. But I prefer having a copy of the site in my own Git hosting account (on Bitbucket, for the record), and it&rsquo;s hardly any additional bother. My Bitbucket repo is on &ldquo;origin&rdquo;, the Octopress repo is on &ldquo;octopress&rdquo;, and Heroku is on &ldquo;heroku&rdquo;.</p>

<p>Whenever I want to push updates to deploy to Heroku, I simply do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>Finally, I set up Heroku to <a href="https://devcenter.heroku.com/articles/custom-domains">use my domain name</a>.</p>

<h2>What I Think</h2>

<p>I haven&rsquo;t used Octopress for very long yet, but a few thoughts:</p>

<ul>
<li>Writing posts in Vim and in Markdown syntax has made me realize how much of a drag using the Wordpress post editor was on my blog writing. I write code all day in Vim, and writing my blog posts there too is much less of a context switch. Flicking back and forth between Vim buffers is a lot less of a hassle. It makes offline blogging a lot easier, too.</li>
<li>I never found a code formatting plugin for Wordpress that I did not hate. Octopress comes with code formatting styling out-of-the-box and it works very well. I&rsquo;m not a huge fan of the Solarized theme it uses by default, and I may see about changing that in the future. But the important thing is that it works.</li>
<li>Not having to worry about Wordpress updates is a big relief. I can&rsquo;t say that I stayed on top of updates nearly as much as I needed to. And I don&rsquo;t have to worry about database backups, either. There&rsquo;s a &ldquo;weight off my shoulders&rdquo; feeling with making this move.</li>
<li>There&rsquo;s something comforting about having my entire blog history as a series of Markdown files, instead of posts locked away in a Wordpress database table in MySQL.</li>
<li>There are a lot of neat Octopress plugins that I haven&rsquo;t really delved into yet. But the default out-of-the-box experience is pretty much awesome. Even if, for now, my blog looks just like a bunch of other Octopress blogs.</li>
</ul>


<h2>Tip: Use IFTTT to tweet new posts</h2>

<p><img class="right" src="http://brendonrapp.github.io/media/images/ifttt-logo.png">
One of the plugins I used with Wordpress would add tweets to my Twitter feed, informing followers of new posts to the blog.</p>

<p>Without the server-side component, Octopress lacks this ability. However, thanks to the fact that Octopress generates an RSS feed file, we can use an external service to accomplish the same thing.</p>

<p><a href="http://www.ifttt.com">IFTTT</a> is a service that allows you to write &ldquo;triggers&rdquo; that perform various actions. In this case, I have IFTTT watching my blog&rsquo;s RSS feed, and whenever it detects a new feed item, it makes a post to my Twitter, as well as one to my Facebook wall.</p>

<h2>Tip: Use Pow on OS X for easy testing</h2>

<p><img class="right" src="http://brendonrapp.github.io/media/images/pow-logo.png" width="200">
By default, users can run <code>rake preview</code> to make Octopress spin up a web server at <a href="http://0.0.0.0:4000">http://0.0.0.0:4000</a> and listen for changes to files to automatically rebuild the site for easy previewing.</p>

<p>This process can be made a little nicer with <a href="http://pow.cx/">Pow</a>, a handy little Rack webserver for OS X.</p>

<p>Just add a symlink your site folder in to ~/.pow/, and your system will run that site, and configure it to be reachable at <a href="http://symlink-name.dev.">http://symlink-name.dev.</a> Then, run <code>rake watch</code> to make Octopress listen for changes and rebuild pages.</p>

<h2>Gotcha: Drafts aren&rsquo;t imported by Exitwp</h2>

<p>I had accumulated many half-written posts in my Wordpress install over the years. Posts that I <em>totally</em> intend to finish.</p>

<p>Exitwp did not import these (or, more likely, the Wordpress export functionality did not include them in the export. I&rsquo;m not sure which it is.)</p>

<p>I ended up fetching these manually.</p>

<h2>Gotcha: zsh and square bracket commands</h2>

<p>From that point on, I just followed the Octopress documentation to get up and running. I did, however, run into an annoying issue.</p>

<p>Octopress command-line commands often use square brackets, such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["My new post's title"]</span></code></pre></td></tr></table></div></figure>


<p>Run it in zsh, though, and you get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["My new post's title"]
</span><span class='line'>zsh: no matches found: new_post[My new post's title]</span></code></pre></td></tr></table></div></figure>


<p>The problem is that square brackets are a <a href="http://zsh.sourceforge.net/Doc/Release/Expansion.html#Filename-Generation">glob operator</a> in zsh. <a href="http://ryanarneson.com/blog/2012/04/07/rake-new-post-doesnt-work-with-zsh/">This blog post</a> pointed me in the right direction. The &ldquo;solution&rdquo; is to escape the square bracket characters.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post\["My new post's title"\]</span></code></pre></td></tr></table></div></figure>


<p>Alternately, zsh users can disable zsh&rsquo;s GLOB option. From the Octopress Github issue on this problem, though, it sounds like some tweaks will be added to Octopress to address the issue.</p>

<h2>References</h2>

<ul>
<li><a href="http://blog.pixelingene.com/2011/09/switching-to-the-octopress-blogging-engine/">Pixel Gene: Switching to the Octopress Blogging Engine</a></li>
<li><a href="http://www.peterprovost.org/blog/2012/04/15/switching-the-blog-to-octopress">Peter Provost: Switching the Blog to Octopress</a></li>
<li><a href="http://jphenow.com/docs/setup/">JPhenow: Octopress Setup</a></li>
<li><a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku">Sam de Freyssinet: Get Blogging with Octopress on Heroku</a></li>
<li><a href="http://ryanarneson.com/blog/2012/04/07/rake-new-post-doesnt-work-with-zsh/">Brain Dump: Octopress&#8217; rake new_post Doesn&rsquo;t Work with zsh</a></li>
<li><a href="http://alexyoung.org/2009/07/09/new-blog/">alexyoung.org: Using Jekyll</a></li>
<li><a href="http://instant-thinking.de/2012/05/08/tweeting-a-new-octopress-post-to-twitter/">Instant Thinking: Tweeting a new Octopress post to Twitter</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nitrous: My jailbreak's killer app]]></title>
    <link href="http://brendonrapp.github.io/2012/08/16/nitrous-my-jailbreaks-killer-app/"/>
    <updated>2012-08-16T15:58:00-07:00</updated>
    <id>http://brendonrapp.github.io/2012/08/16/nitrous-my-jailbreaks-killer-app</id>
    <content type="html"><![CDATA[<p>When Google released Chrome for iOS, initial excitement was tempered when users realized that, thanks to Apple&rsquo;s restrictions, Chrome lacked Google&rsquo;s V8 JavaScript engine. When you get down to it, Chrome in iOS is just a browsery widget wrapper around iOS UIWebViews.</p>

<p>Worse, because Chrome is not an Apple app, it does not take advantage of the Nitro JavaScript engine that is built into iOS and used by Apple apps like Safari.</p>

<p>Thankfully, jailbreaking iOS users can now add Nitro support to Chrome (and other apps) with the new Nitrous app on the Cydia store.</p>

<p>Nitrous adds a menu to the iOS Settings app, which allows users to selectively flag applications to use Nitro, thus allowing that app&rsquo;s web views to perform as they do in mobile Safari.</p>

<p><img class="center" src="http://brendonrapp.github.io/media/images/nitrous-settings.png"></p>

<p>Enabling Nitro on non-Safari web browsers is great enough, but it also allows enabling Nitro on other apps that make use of UIWebViews, such as client apps for Reddit, Twitter, and Facebook.</p>

<p>The following image from <a href="http://www.letsunlockiphone.com/nitrous-cydia-tweak-nitro-javascript-chrome-ios/">this post</a> demonstrates the performance improvement of Nitro in Chrome by running the SunSpider JavaScript performance test:</p>

<p><img class="center" src="http://brendonrapp.github.io/media/images/nitrous-sunspider.jpg"></p>

<p>While it&rsquo;s not quite the same thing as Chrome being able to include V8 in iOS Chrome, the ability to use Nitro in Chrome takes away one of the two major disadvantages Chrome has on iOS. (The other disadvantage &ndash; not being the default browser &ndash; can be solved with the Browser Chooser app, allowing users to elevate Chrome to the iOS default browser).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching with DuckDuckGo]]></title>
    <link href="http://brendonrapp.github.io/2012/08/14/searching-with-duckduckgo/"/>
    <updated>2012-08-14T19:21:00-07:00</updated>
    <id>http://brendonrapp.github.io/2012/08/14/searching-with-duckduckgo</id>
    <content type="html"><![CDATA[<p>1993 is considered to be the starting point of the commercial Internet. For those of us living in little farm towns in the San Joaquin Valley, however, it would not be until 1995 that the Internet came into our lives.</p>

<p>Weeks before the big opening of the local unlimited-use dial-up ISP, the local newspaper ran an article about the Internet and listed some websites to check out. Among the list was Infoseek, one of the first major search engines. There were a small army of search engines in those days that vied for attention: AltaVista, Excite, Lycos, WebCrawler, and of course, Yahoo. For me, though, Infoseek was my home on the Internet for the next 3 years.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/02/infoseek-crop.jpg"></p>

<p>As detailed on Wikipedia&rsquo;s brief <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Infoseek#History">History section for Infoseek</a>, the site peaked in 1997, was acquired by Disney in 1998 and merged with other Disney online properties <a href="http://news.cnet.com/Disney-and-Infoseek-raise-the-curtain-on-Go/2100-1023_3-219045.html">to form Go.com</a>, and by mid-1999, ceased to exist as its own site.</p>

<p>I remember the day Infoseek.com began redirecting to Go.com. The lean search engine pictured above was gone, and a late &lsquo;90s &ldquo;portal&rdquo; site was in its place. By that time, however, the folks on ZDTV (the original, superior version of TechTV) had long been cluing people in on a new search engine called Google.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/02/google.jpg">
<small>Kids, this was what Google looked like when your parents started using it. At least if your parents were late &lsquo;90s geeks.</small></p>

<p>Google has been my search engine since the day Infoseek kicked over to Go.com. So, that&rsquo;s almost 12 years now.</p>

<p>As of the past few months, however, I have been experimenting with another search engine. I&rsquo;m not talking about Bing. I mean DuckDuckGo.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/02/duckduckgo.jpg"></p>

<p>DuckDuckGo has many things going for it, to differentiate itself from Google.</p>

<p>The first is that DDG takes user privacy very seriously. Indeed, this is probably the main thing they use to separate themselves from Google, as evidenced by the <a href="http://donttrack.us/">donttrack.us</a> website and the Google-slapping billboard advertising the site:</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/02/ddg_billboard2-660x441.jpg">
<small>DDG sticks it to Google with this San Francisco billboard and the donttrack.us website.</small></p>

<p>donttrack.us explains DDG&rsquo;s privacy protection better than I can, so I won&rsquo;t try to re-summarize it here. While I am not a privacy zealot, I do place some degree of value on increased privacy. I use ad-blockers, script-blockers, and other such privacy protecting browser extensions. I do consider DDG&rsquo;s privacy handling an asset, although I am not going to freeze out Google or stop using Google&rsquo;s non-search services (of which I use many) over their tracking. When it comes down to it, I will choose functionality over privacy protection, but I will make an effort to try and get both.</p>

<p>Privacy is about the only thing I ever hear brought up as to why one should use DDG. However, there is one feature that I think is a bigger deal: DDG&rsquo;s <a href="https://duckduckgo.com/bang.html">!bang syntax</a>.</p>

<p>If you type a search query into DDG and include an exclamation point (commonly called a &ldquo;bang&rdquo;) along with a name/code known to DDG, it sends your search to that site&rsquo;s search function, instead of searching DDG itself.</p>

<p>For example, if you enter &ldquo;pink floyd !g&rdquo; into DuckDuckGo&hellip;</p>

<p><img class="center" src="http://brendonrapp.github.io/media/images/duckduckgo.png"></p>

<p>&hellip; you&rsquo;ll be sent to the Google search results page for &ldquo;pink floyd&rdquo;:</p>

<p><img class="center" src="http://brendonrapp.github.io/media/images/google-pinkfloyd.png"></p>

<p>Now I can hear you thinking, &ldquo;why would you go to DDG to type a search meant for Google, instead of just going to Google in the first place?&rdquo;. The answer is, I don&rsquo;t actually go to a website to do my searching. Browsers like Chrome and Firefox have the ability to type a search into the browser directly (in the URL bar in Chrome and in Firefox if you use Foobar or Omnibar.</p>

<p>By setting my browser&rsquo;s default search engine to DDG, I have direct access to many search engines from the browser bar, by using the !bang syntax.</p>

<ul>
<li>I search the documentation of things like Rails, jQuery, etc. with !rails, !jquery, etc.</li>
<li>I can search Amazon instantly with !amazon or even the shorter version, !a.</li>
<li>Searching Reddit is !reddit  or !r. HackerNews is !hackernews or !hn.</li>
<li>StackOverflow, ServerFault, and SuperUser are !so, !sf, and !su (or !stackoverflow, !serverfault, and !superuser).</li>
<li>Google search is !g or !google, but the various sub-searches are available too. !gn for Google News search. !gi for Google Images.</li>
</ul>


<p>It is true that one can set up their browser to have search triggers like this, thus removing the need to funnel the search traffic through DDG. But using DDG means all of these search triggers are preconfigured. All I do is point my browser&rsquo;s search bar to DDG.</p>

<p>Best of all, the !bang options are so intuitive that I never end up looking any of them up. I just try it out and almost 100% of the time, what I think the trigger would be is exactly what it is.</p>

<p>Now, the truth is, DuckDuckGo can&rsquo;t go toe-to-toe with Google in terms of pure search result quality. A sizeable portion of my searches end up getting appended with the !g bang and sent to Google. That said, the effort required to still use Google in this way is minimal, and the benefit gained from having all the other !bang operators at my fingertips is well worth it. DDG&rsquo;s results continue to get better, though, and I prefer having my searches go to DDG by default, and only selectively send some to Google.</p>

<p>To top it off, there are also a lot of other little <a href="https://duckduckgo.com/goodies.html">goodies</a> built into DDG. I particularly like the <a href="https://duckduckgo.com/tech.html">tech goodies</a>. I often enter &ldquo;random password&rdquo; into DDG to get a quick and easy 8-character random password.</p>

<p>Most of all, though, it&rsquo;s the !bang syntax that has made DuckDuckGo stick for me. It has taken me some time to get into the habit of using certain !bang searches, but they&rsquo;re always time savers once I get into that habit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Segfault after building Command-T plugin for Vim]]></title>
    <link href="http://brendonrapp.github.io/2012/08/13/segfault-after-building-command-t-plugin-for-vim/"/>
    <updated>2012-08-13T19:25:00-07:00</updated>
    <id>http://brendonrapp.github.io/2012/08/13/segfault-after-building-command-t-plugin-for-vim</id>
    <content type="html"><![CDATA[<p>The <a href="https://wincent.com/products/command-t">Command-T plugin</a> provides TextMate-style &ldquo;go to file&rdquo; searching for Vim.</p>

<p>It&rsquo;s a very nice plugin. Part of the installation process involves building/compiling the plugin, as it is partially written in C.</p>

<p>I have twice encountered a situation where my Gvim would segfault when trying to launch, after having built the plugin.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>legion@legion-desktop:
</span><span class='line'>~/.vim/bundle/command-t$ gvim
</span><span class='line'>Vim: Caught deadly signal SEGV
</span><span class='line'>Vim: Finished.
</span><span class='line'>Segmentation fault</span></code></pre></td></tr></table></div></figure>


<p>The problem was due to building the plugin using a different version of Ruby than the one that Gvim was built with. For me, this is because I was using the Gvim that comes with my Linux distribution (Ubuntu), but not the Ruby that comes included in the distro. Instead, I am running RVM and defaulting to a more current Ruby interpreter in my Bash environment.</p>

<p>The answer, for me, was to switch to the &ldquo;system&rdquo; Ruby in RVM, and then rebuild the plugin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm --system
</span><span class='line'>rake make</span></code></pre></td></tr></table></div></figure>


<p>I also had this happen on my Mac laptop. Same basic situation: mismatch between the version of Ruby that my copy of MacVim was built with, and the version I was using in RVM. In that case, I believe I installed a new Ruby with RVM, one that matched the version that the particular MacVim build was built with.</p>

<p>To find out which version of Ruby that Vim/Gvim/MacVim was built with, use the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:ruby p RUBY_VERSION</span></code></pre></td></tr></table></div></figure>


<p>Then, if you don&rsquo;t already have that version of Ruby in your OS, you can build a matching one from within RVM, and use that one to build the plugin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overclocking: Getting the Low-Hanging Fruit]]></title>
    <link href="http://brendonrapp.github.io/2012/05/27/overclocking-getting-the-low-hanging-fruit/"/>
    <updated>2012-05-27T06:43:11-07:00</updated>
    <id>http://brendonrapp.github.io/2012/05/27/overclocking-getting-the-low-hanging-fruit</id>
    <content type="html"><![CDATA[<p>I have started playing a game called Day Z (a mod for the game ArmA 2). I will write about this at a later time. One thing I will mention, though, is that ArmA 2 is a very CPU-demanding game. As a result, I found myself wanting to get some extra performance out of my system&rsquo;s processor. I decided that I would overclock it, as I have done on many of my systems before.</p>

<p>One thing to understand about CPU production is that Intel and AMD don&rsquo;t design completely separate cores for each CPU product they sell. Rather, they&rsquo;ll make one CPU core and clock it at different speeds to make a range of products. What this means to overclockers is that it&rsquo;s often trivially easy to buy a CPU from the low-end of that range, and overclock it to run at the speed of the high-end.</p>

<p>To be honest, this barely qualifies for &ldquo;overclocking&rdquo;. It&rsquo;s more like removing an artificial restriction that makes the CPU run slower than the higher speeds of which it is capable. &ldquo;Real&rdquo; overclockers like to take CPUs and see just how far they can push those cores, way beyond the normal range that Intel or AMD are willing to clock those chips for wide production. Overclockers utilize more aggressive methods of keeping the chip cool, increase voltage beyond the stock levels, and other such tweaks to push a core to its maximum stable (or, sometimes, not-so-stable) limits.</p>

<p>This is not the level of overclocking that I participate in. I am simply interested in getting the low-hanging fruit. Taking a chip clocked at the low-end of the range of CPUs using the same core, and turning it up to the high-end, is a very easy way to spend less on a CPU and end up with the same level of performance. Sometimes, depending on how much cushion is left, a chip can go even higher relatively painlessly. (Intel/AMD don&rsquo;t necessarily always max out a core&rsquo;s capable range. Sometimes they simply move on to the next core.) When buying CPUs, I tend to buy on the low-end of the core&rsquo;s range, knowing that I will probably have an easy overclock ahead of me if I need more CPU power.</p>

<p>My current system runs an AMD Phenom II x6 hex-core CPU. It&rsquo;s the 1055T, giving it a stock clock of 2.8 GHz. The other chips that use the &ldquo;Thuban&rdquo; core that this one does run up to 3.3 GHz. What&rsquo;s more, overclockers found it trivial to clock them up much higher &ndash; AMD definitely did not release any CPUs that reack the peak range of this core. So, I bought a nice big heatsink/fan combo (Cooler Master Hyper 212 Plus), replaced the crappy stock AMD heatsink, and clocked the chip up to 3.5 GHz. It&rsquo;s a nice 700 MHz boost, yet overall it is still a very conservative overclock. With the new heatsink, my CPU temperatures are chilly cool (a good 15 Celsius cooler than they were at 2.8 GHz with the stock AMD fan), so I know heat is no factor. I hear 3.8 GHz is reasonably achievable, though with some slight voltage bumps. Nothing I&rsquo;d be afraid of, but at this point, I start to reach diminishing returns. I have successfully picked the low-hanging fruit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error building Ruby 1.8.7 with rbenv/ruby-install on Linux with glibc >= 2.14]]></title>
    <link href="http://brendonrapp.github.io/2012/05/10/error-building-ruby-1-8-7-with-rbenvruby-install-on-linux-with-glibc-2-14/"/>
    <updated>2012-05-10T07:26:47-07:00</updated>
    <id>http://brendonrapp.github.io/2012/05/10/error-building-ruby-1-8-7-with-rbenvruby-install-on-linux-with-glibc-2-14</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using rbenv and ruby-build on a Linux that has updated to glibc 2.14 or newer, you may have encountered an error like this when attempting to build an older version of MRI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv install 1.8.7-p357 rbenv: 1.9.3-p194
</span><span class='line'>    Downloading http://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7-p357.tar.gz...
</span><span class='line'>    Installing ruby-1.8.7-p357...
</span><span class='line'>
</span><span class='line'>    BUILD FAILED
</span><span class='line'>
</span><span class='line'>    Inspect or clean up the working tree at /tmp/ruby-build.20120508145707.21228
</span><span class='line'>    Results logged to /tmp/ruby-build.20120508145707.21228.log
</span><span class='line'>
</span><span class='line'>    Last 10 log lines:
</span><span class='line'>    callback.func:79:24: error: ‘proc’ undeclared here (not in a function)
</span><span class='line'>    callback.func:79:39: error: ‘argc’ undeclared here (not in a function)
</span><span class='line'>    callback.func:79:45: error: ‘argv’ undeclared here (not in a function)
</span><span class='line'>    callback.func:82:1: error: expected identifier or ‘(’ before ‘}’ token
</span><span class='line'>    dl.c:106:1: error: expected ‘;’, ‘,’ or ‘)’ before ‘static’
</span><span class='line'>    cp ../.././ext/dl/lib/dl/import.rb ../../.ext/common/dl
</span><span class='line'>    make[1]: *** [dl.o] Error 1
</span><span class='line'>    make[1]: *** Waiting for unfinished jobs....
</span><span class='line'>    make[1]: Leaving directory `/tmp/ruby-build.20120508145707.21228/ruby-1.8.7-p357/ext/dl'
</span><span class='line'>    make: *** [all] Error 1</span></code></pre></td></tr></table></div></figure>


<p>The issue isn&rsquo;t specific to ruby-build or rbenv, but rather is an issue with <a href="http://bugs.ruby-lang.org/issues/5108">building Ruby after upgrading glibc to 2.14</a>:</p>

<blockquote><p>This is caused by the fact that the generated file callback.func is corrupt. The corruption is triggered by a recent glibc change:</p></blockquote>

<p><a href="http://sourceware.org/git/?p=glibc.git;a=commitdiff;h=glibc-2.13-161-gfcabc0f">http://sourceware.org/git/?p=glibc.git;a=commitdiff;h=glibc-2.13-161-gfcabc0f</a></p>

<p>which was to fix a POSIX compatibility issue:</p>

<p><a href="http://sourceware.org/bugzilla/show_bug.cgi?id=12724">http://sourceware.org/bugzilla/show_bug.cgi?id=12724</a></p>

<p>Patches are provided to manually patch the Ruby source before building, but what if you&rsquo;re using something like rbenv and ruby-install, instead of building Ruby manually?</p>

<p><a href="https://gist.github.com/2159108">This Gist</a>, from GitHub user kungfoo, provides a ruby-build definition for building Ruby 1.8.7-p358 with the required patch for building on a system with the updated glibc.</p>

<p>To date, I had only used rbenv and ruby-build to build Rubies from ruby-build&rsquo;s included definitions. Turns out, it&rsquo;s quite easy to use this definition, once I realized that that&rsquo;s what this was.</p>

<p>Simply do the following:</p>

<pre><code>$ vim /tmp/1.8.7-p358-with-rogue-stdout-patch
... paste contents of Gist into file, save and exit ...
$ rbenv install /tmp/1.8.7-p358-with-rogue-stdout-patch
</code></pre>

<p>Note, the filename will be the name that rbenv uses to identify this Ruby, so if you don&rsquo;t want the name to be &ldquo;1.8.7-p358-with-rogue-stdout-patch&rdquo;, name the file to match the name you prefer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pauses/hanging in Thunderbird in Linux with Lightning]]></title>
    <link href="http://brendonrapp.github.io/2012/04/09/pauses-hanging-in-thunderbird-in-linux-with-lightning/"/>
    <updated>2012-04-09T06:30:31-07:00</updated>
    <id>http://brendonrapp.github.io/2012/04/09/pauses-hanging-in-thunderbird-in-linux-with-lightning</id>
    <content type="html"><![CDATA[<p>I was experiencing some very annoying pauses &amp; hangs in Thunderbird in Linux. The application would hang when launching, and periodically while open as well. CPU and RAM usage were not spiking, but the process status would show up in <em>top</em> as D (uninterruptible sleep &ndash; usually IO, according to the <em>ps</em> manpage).</p>

<p>I tracked down the issue as being related to the Lightning calendaring extension. Lightning has an option for caching calendar entries for remote calendars. This <em>seems</em> like it would be a feature that improves performance, but as it turned out, it caused a lot of app-stalling IO. Each remote calendar has a Cache checkbox in its settings. Unchecking this immediately put an end to the pausing issues.</p>

<p>What clued me in was <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=576017">this bug report</a>, which is almost 2 years old and still &ldquo;unconfirmed&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing slow Vim auto-completion with Ruby files]]></title>
    <link href="http://brendonrapp.github.io/2012/03/01/fixing-slow-vim-auto-completion-with-ruby-files/"/>
    <updated>2012-03-01T12:48:30-08:00</updated>
    <id>http://brendonrapp.github.io/2012/03/01/fixing-slow-vim-auto-completion-with-ruby-files</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been a happy Vim user for a little while now. With the exception of Objective-C for iOS development (too much of a pain without Xcode&rsquo;s completion), I&rsquo;ve been writing all of my code in Vim.</p>

<p>However, I have not been making use of Vim&rsquo;s auto-completion features, due to a serious performance issue when used with Ruby files. Completion was painfully slow. It was annoying when triggering completion manually, but it was a complete show-stopper when used with an automatic completion plugin like NeoComplCache.</p>

<p>Finally, I got a clue from <a href="http://stackoverflow.com/questions/2169645/vims-autocomplete-is-excruciatingly-slow/4277400#4277400">this StackOverflow response</a>:</p>

<blockquote><p>Had a very similar problem since upgrading to Vim 7.3 (from 7.2): I was using the (excellent) ACP plugin and in longer source files (C-files, 1700 LOC), the popup took ages to jump through the suggestions when I was editing near the bottom of the file.</p></blockquote>

<p>Using the PerformanceValidator (from Softwareverify), I found out that some fold methods were called again and again and lead to very high processor load and slow completion.</p>

<p>My workaround was to set the foldmethod (fdm) to manual. And this solved it&hellip;</p>

<p>Now, I was having issues with fairly short Ruby files, as opposed to the large C files that this responder was editing. However, it clued me in to the fact that foldmethod was getting called a lot during auto-completion, and led me to experiment.</p>

<p>Finally, I found the issue:</p>

<p><strong>foldmethod=syntax is dog-ass slow when editing Ruby syntax files.</strong></p>

<p>As soon as I switch to any other foldmethod, Ruby auto-completion becomes instant. I&rsquo;ve been using foldmethod=indent, which creates folds based on code indent levels. This seems to work as well for me as syntax-aware folding did.</p>

<p>Hopefully that tip helps out anyone else who found Vim auto-completion strangely non-performant while working with Ruby files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Battlefield 3: Get out of my way!]]></title>
    <link href="http://brendonrapp.github.io/2011/11/03/battlefield-3-get-out-of-my-way/"/>
    <updated>2011-11-03T05:02:29-07:00</updated>
    <id>http://brendonrapp.github.io/2011/11/03/battlefield-3-get-out-of-my-way</id>
    <content type="html"><![CDATA[<p>Dear Battlefield 3,</p>

<p><img src="http://www.economyofeffort.com/wp-content/uploads/2011/11/bf3.jpg" alt="" /></p>

<p><strong>Yes, I know I&rsquo;m in a Conquest checkpoint&rsquo;s capture radius!</strong> The little map in the corner that&rsquo;s got a big box next to me kind of gave that fact away.</p>

<p>Now will you please <strong>get the mother-fudge out of the way?</strong> I am trying to look at things where you&rsquo;ve got your big obnoxious indicator.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The (Wifi) Bridge to Nowhere]]></title>
    <link href="http://brendonrapp.github.io/2011/09/06/the-wifi-bridge-to-nowhere/"/>
    <updated>2011-09-06T06:35:28-07:00</updated>
    <id>http://brendonrapp.github.io/2011/09/06/the-wifi-bridge-to-nowhere</id>
    <content type="html"><![CDATA[<p>At a restaurant I often go to for lunch, I recently noticed that connecting my iPad to the wifi network resulted in a strong signal, but no usable Internet.</p>

<p>When I spied the router, high up on the wall, I soon discovered why.</p>

<p><img src="http://www.economyofeffort.com/wp-content/uploads/2011/09/router-to-nowhere.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YubiKey: Inexpensive Two-Factor Authentication]]></title>
    <link href="http://brendonrapp.github.io/2011/06/10/yubikey/"/>
    <updated>2011-06-10T05:10:27-07:00</updated>
    <id>http://brendonrapp.github.io/2011/06/10/yubikey</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/06/two-factor.gif">
<small>Pointless trivia: This image, nicely depicting the concept of two-factor authentication, was taken from the <a href="http://www.info.gov.hk/hkma/eng/consumer/two_factor_auth_index.htm">Hong Kong central bank&rsquo;s website</a></small>></p>

<h2>What is Two-Factor Authentication?</h2>

<p>Normally, when you log onto a computer-based service, you enter a username to tell the system who you are, and a password to <em>authenticate</em> (prove that you are who you say you are) with the system.</p>

<p>That is one-factor authentication: you are providing only one thing to prove your identity.</p>

<p>Two-factor authentication is a setup where you have to provide more than one thing to authenticate yourself. In most cases, this means your password in addition with some physical device, a hardware-based <em>token</em>. (It is possible to create authentication systems that require even more than two factors. Systems that require two or more factors are more generally called <em>multi-factor authentication</em>).</p>

<p>The YubiKey is an inexpensive ($25) device that provides this sort of additional authentication factor.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/06/yubikey.jpg"></p>

<h2>How does it work?</h2>

<p>The YubiKey is a simple device that plugs into any USB port on your computer. The device has a single button, which, when you press it, spits out a One Time Password (OTP). In the eyes of the computer, the YubiKey is literally just a USB keyboard, and when you press the button, it enters text as if a person is typing (very fast) on that keyboard. Most operating systems support USB keyboards without any additional software, which means that at least on <strong>Windows, Mac OS X, and Linux</strong>, you can stick the YubiKey into the computer and press the button without having to install any additional software. Needless to say, this makes it incredibly convenient.</p>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/06/yubikey-lastpass.png"></p>

<p>So, when you log into a service that supports YubiKey authentication, you&rsquo;ll enter your username and password as usual, but you&rsquo;ll also be presented with a text box for the YubiKey itself to &ldquo;type&rdquo; into. You&rsquo;ll click in the text box as if you&rsquo;re going to type in it yourself, but instead, you&rsquo;ll press the YubiKey&rsquo;s button and it will &ldquo;type in&rdquo; a very long password. Then you&rsquo;ll click to log in like normal, and assuming both your password and YubiKey are valid, you&rsquo;ll log in.</p>

<h2>What makes this more secure?</h2>

<p><img class="right" src="http://www.economyofeffort.com/wp-content/uploads/2011/06/nikolai-300x225.jpg"></p>

<p>The idea behind a one-time password is that, as the name states, the password can only be used once. Even if someone is sniffing your network traffic and grabs a copy of the OTP you just used, he can&rsquo;t turn around and re-use the password itself, as it&rsquo;s been used and is no longer valid.</p>

<p>The idea being multi-factor authentication is that anyone who wishes to login to services as you has to be able to provide all factors. Stealing your password or stealing your YubiKey isn&rsquo;t enough &ndash; they&rsquo;d need to have both. That requirement of getting ahold of something that&rsquo;s physically in your possession dramatically reduces the number of people with opportunity to take your digital identity. A hacker in Russia might be able to set up a website to trick me into giving up my password, but it&rsquo;s a long flight for him to come get my YubiKey too.</p>

<h2>How do I make services &ldquo;use&rdquo; my YubiKey?</h2>

<p><img class="right" src="http://www.economyofeffort.com/wp-content/uploads/2011/06/lastpass-logo.gif"></p>

<p>First of all, to use the YubiKey, the service itself has to support YubiKey authentication. This won&rsquo;t be common with your average website, but it will be more common with more security-minded services, like <a href="http://www.lastpass.com">LastPass</a> or <a href="http://www.passpack.com">PassPack</a>.</p>

<p>Secondly, before you can use your YubiKey to authenticate with a service, you have to associate your YubiKey with your account on that service. How this is done depends entirely on how that service has that feature set up. <a href="http://helpdesk.lastpass.com/security-options/yubikey-authentication/">Here, for example, is LastPass&rsquo;s instruction page</a> for associating YubiKeys with your account on their service.</p>

<h2>What about services that don&rsquo;t support YubiKey?</h2>

<p>If a service doesn&rsquo;t support the YubiKey directly, but does support OpenID authentication, you can use your YubiKey for two-factor authentication by using an OpenID service which supports the YubiKey itself.</p>

<p><a href="http://www.clavid.com"><img class="right" src="http://www.economyofeffort.com/wp-content/uploads/2011/06/Clavid_logo.gif"></a></p>

<p><a href="http://www.clavid.com">Clavid.com</a> is such a service. With a properly set-up Clavid.com OpenID identity, you can have two-factor authentication for any service that does OpenID.</p>

<p>However, outside of those options, there&rsquo;s nothing you can do to add YubiKey support to a service that doesn&rsquo;t have it, besides emailing them and bugging them to add it.</p>

<h2>What if those services get hacked? Is my YubiKey compromised?</h2>

<p>When you register your YubiKey with a service like LastPass, that service does not have your Yubico encrypted identity. All they store is the 12-character Yubico ID. When you tap your YubiKey&rsquo;s button and send a One-Time Password to that service, they don&rsquo;t have the means of processing the password and verifying your identity. Instead, they send that password (which contains your 12-character ID) to the Yubico servers, which responds back with a &ldquo;yes&rdquo; or &ldquo;no&rdquo; to that service. Yubico acts as an authentication gateway for that factor.</p>

<p>So, only Yubico has the information necessary to process the passwords that your YubiKey creates. So, that leads to the question: what if Yubico is hacked? That is the scenario where your YubiKey&rsquo;s identity may be compromised. Indeed, this happened with another token authentication system recently, <a href="http://www.extremetech.com/article2/0,2845,2386541,00.asp">RSA&rsquo;s SecurID</a>. However, as long as you are using YubiKeys for multi-factor authentication, and not as a replacement for passwords, then the result of this would be that your accounts are still protected by your passwords. In other words, you&rsquo;d be in the exact same place as if you weren&rsquo;t using YubiKeys to begin with.</p>

<h2>The YubiKey website says this thing supports a bunch of different authentication systems. What&rsquo;s the story there?</h2>

<p>The YubiKey is quite a flexible little device, and can indeed be used with a number of different authentication systems.</p>

<p>The most common of these, the thing that people are generally referring to when talking about YubiKey authentication, is Yubico&rsquo;s YubiKey OTP authentication service. This is what standard YubiKeys come ready to work with right out-of-the-box, and this is what services like LastPass are referring to when stating that they support YubiKey.</p>

<p>However, you can program YubiKeys to support different systems. One thing you can do is program the YubiKey to store a single <a href="http://www.yubico.com/static-password">static password</a>. You press the button, and the YubiKey types in this password. This is a way to be able to create a and use a long, complex password that you can&rsquo;t possibly memorize. And because it&rsquo;s just a plain password, you can use it with any password-based system. This isn&rsquo;t multi-factor authentication (since you&rsquo;re back to using just a password, not something in addition to a password), but it can be very useful in certain circumstances. Yubico mentions an ideal use case: <a href="http://static.yubico.com/var/uploads/pdfs/TrueCrypt%202011-03-23.pdf">long passwords for encrypting TrueCrypt vaults</a>.</p>

<p><img class="right" src="http://www.economyofeffort.com/wp-content/uploads/2011/06/oath.png"></p>

<p>YubiKeys can be programmed to work with Open Authentication (OATH). Now, read that closely. That is OATH, a system developed by VeriSign, and not OAuth, a system developed by Twitter. It took me a while before I noticed this, as I had only ever heard of OAuth before. <a href="http://blogs.verisign.com/identity-emea/2008/07/oauth_and_oath_confusing_1.php">Here&rsquo;s a post from a VeriSign blogger</a> describing the difference between these two unfortunately similarly-named projects. OATH is used in (formerly VeriSign&rsquo;s, now Symantec&rsquo;s) VIP authentication system, which we&rsquo;ll talk about later. Yubico does not run any OATH services themselves.</p>

<p>YubiKeys can also be programmed to work with SAML authentication systems. SAML is used by Google Apps&#8217; Single Sign On feature, and Yubico provides a SAML server which can be used to set up SAML-based Single Sign On for your Google Apps domain. <a href="http://wiki.yubico.com/wiki/index.php/SAMLServerStepByStep">Here are Yubico&rsquo;s step by step instructions</a> for doing that.</p>

<p>In general, these other non-Yubico systems are things you would use with a specific purpose in mind, not for generally-available web services.</p>

<h2>Can you use all these services on the same YubiKey?</h2>

<p>Originally, YubiKeys supported only one &ldquo;identity&rdquo;, meaning you had to pick and choose only one of these authentication systems to use your YubiKey with.</p>

<p>Newer YubiKeys support two identities, so you make one YubiKey work with two different authentication systems. Naturally, most users will have a Yubico identity as one of their two. By default, the second identity is blank, so setting a key up to work with another authentication system requires using one of the <a href="http://www.yubico.com/personalization-tool">free personalization software tools</a> to program the second identity. It can be a little tricky if you haven&rsquo;t done it before, so be patient and find good instructions (I may write some of my own in another post).</p>

<p>The way that you use a YubiKey with two different services is pretty clever. If you press the YubiKey button for 0 to 1.5 seconds, it outputs the results for the programmed identity in the first slot. Hold the button longer &ndash; 2.5 to 5 seconds &ndash; and it does the output for the second identity instead. There is a &ldquo;dead zone&rdquo; gap in the (approximately) 1.5-2.5 second range so that you can&rsquo;t accidentally end up at the &ldquo;border&rdquo; between the two. Any tap at all is sufficient for triggering slot 1, so you&rsquo;ll tap for slot 1 and hold the button down for slot 2, and you&rsquo;ll get nothing at all if you try to let go in no man&rsquo;s land.</p>

<h2>What about the Symantec VIP service?</h2>

<p><img class="center" src="http://www.economyofeffort.com/wp-content/uploads/2011/06/VIP-Access.png">
<small>The &ldquo;V&rdquo; still stands for VeriSign</small></p>

<p>Symantec&rsquo;s VIP service uses OATH. However, there is a catch. While you can create an OATH-compatible identity, end users like us have no way of getting that identity into the VIP service. They do not provide a means of uploading your own created identity, as Yubico does with their service.</p>

<p>As such, Yubico has created the <a href="http://yubico.com/VIP">Symantec VIP YubiKey</a>. It&rsquo;s a normal YubiKey, except with slot 1 pre-programmed with a Symantec VIP identity, which was entered in to the VIP service at the time of manufacturing, per Symantec&rsquo;s rules, as explained by the YubiKey YouTube user <a href="http://www.youtube.com/comment?lc=_MHd7s7c6pOoAzr_CTkpfIPzE-8HKVXNNZPVXZ_SbFk">in this YouTube comment reply</a>:</p>

<blockquote><p>The [Symantec VIP] YubiKey is the same standard YubiKey &ndash; it already supported OATH. The problem is loading secrets and Symantec&rsquo;s rules are that they can only be loaded at the time of manufacture. Hence the need for a new SKU.</p></blockquote>

<p>So, if you wish to use a YubiKey with the VIP service, you need to buy the &ldquo;VIP&rdquo;-specific model. Note that this model does <em>not</em> come pre-programmed with a Yubico identity, but you are of course free to create one on own for slot 2. Also, the VIP credential is hard-coded into slot 1 and can&rsquo;t be removed, so you only want to get the VIP model if you do intend on using VIP.</p>

<h2>And what if you lose it, or it breaks?</h2>

<p><img src="http://www.economyofeffort.com/wp-content/uploads/2011/06/lost-300x169.jpg"></p>

<p>One big issue with multi-factor authentication is, what happens if you lose or damage one of the factors?</p>

<p>Many services have a recovery process for this, where you have to jump through hoops to prove that you&rsquo;re who you claim to be. It&rsquo;s also possible to order an identical replacement YubiKey that contains the same identity as the one you lost. Again, here you have to jump through hoops to prove your identity.</p>

<p>But there is a better, more forward-thinking way of protecting yourself from losing or damaging YubiKeys &ndash; more YubiKeys! Every YubiKey-compatible service I&rsquo;ve run into so far allows you to associate multiple YubiKeys to your account, allowing you to authenticate using any one of them.</p>

<p>Thus, I own three YubiKeys:
&hellip; one on my keyring,
&hellip; one locked up somewhere safe in my house,
&hellip; and one locked up in my bank safe deposit box.</p>

<p>Should I lose or break the one on my keyring, I have backups available.</p>

<p>It does mean, however, that for every new YubiKey-compatible service I start using, I need to round up all my keys to associate each of them with the new account. But in practice, this is exceedingly rare &ndash; I only have a few things I use YubiKeys with, but they&rsquo;re important things.</p>

<h2>&ldquo;Would you like to know more?&rdquo;</h2>

<p>I&rsquo;ll be writing some more posts as I go dig deeper into what you can do with the YubiKey. LastPass and OpenID are certainly cool and sufficient for picking up some YubiKeys, but I think the ability to integrate it with your own services is more interesting.</p>

<p>There is a PAM module for YubiKey authentication, allowing it to be used with things like SSH and VPN. There are also plugins for web-based CMSs like Wordpress. I&rsquo;m going to dig around and I&rsquo;ll share what I find.</p>

<p>If you have any questions, please ask them and I&rsquo;ll try to answer them, maybe in my next post. Also, if anything in this post is incorrect, please let me know and I will correct it. I am simply a consumer and do not work for Yubico or have any stake in their product other than the ~$75 I&rsquo;ve invested in the three keys I own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stuff I Like That You Should Too: Homebrew for Mac OS X]]></title>
    <link href="http://brendonrapp.github.io/2011/06/07/stuff-i-like-that-you-should-too-homebrew-for-mac-os-x/"/>
    <updated>2011-06-07T05:51:51-07:00</updated>
    <id>http://brendonrapp.github.io/2011/06/07/stuff-i-like-that-you-should-too-homebrew-for-mac-os-x</id>
    <content type="html"><![CDATA[<p>Mac OS X is a UNIX-based operating system. Apple proudly states that fact whenever they&rsquo;re pitching OS X.</p>

<p><img src="http://www.economyofeffort.com/wp-content/uploads/2011/06/apple-unix.png"></p>

<p>A lot of people &ndash; myself included &ndash; like OS X in part because of this fact. I am primarily a Linux user, but for my personal laptop, it&rsquo;s nice to have a system with all the friendly-out-of-the-box UI trappings of a general consumer product, while still having UNIX at my fingertips.</p>

<p>As a UNIX system, though, Mac OS X has some limiting factors. One of the big ones is that the base system (the set of core tools that make up the OS, named Darwin on the Mac) is not really updatable. Updates come from Apple packaged as part of general operating system updates, but even when Apple does push out updates, it usually not all that up-to-date.</p>

<p>What&rsquo;s more, the base system doesn&rsquo;t necessarily come with everything you might want. You can always compile from source, but this is 2011 and package management is a good thing.</p>

<p>There are three main community projects which bring package management for UNIX programs to Mac OS X. They are <a href="http://finkproject.org/">Fink</a>, <a href="http://www.macports.org/">MacPorts</a>, and <a href="http://mxcl.github.com/homebrew/">Homebrew</a>.</p>

<p><a href="http://mxcl.github.com/homebrew/"><img src="http://www.economyofeffort.com/wp-content/uploads/2011/06/homebrew.png"></a></p>

<p>Of these, my favorite is Homebrew. Homebrew is very light and lean, and ideal for people who just want to install some select packages to augment the Darwin base system.</p>

<p>Both Fink and MacPorts work around Darwin by existing in their own little ecosystems. When installing something that depends on another tool that already exists in Darwin, these package managers tend to install their own copies of those tools instead of using the one already on the system. There are some compatibility advantages to this, but at the same time, there is some confusion when there are multiple copies of libraries and binaries on the same system.</p>

<p>Homebrew takes the other approach, relying on what is provided in the Darwin base system instead of replicating everything itself. It augments Darwin instead of treating it as unreliable and building its own little world.</p>

<p>Homebrew in general &ldquo;feels&rdquo; nicer than Fink or MacPorts. In <a href="http://news.ycombinator.com/item?id=1096177">the words</a> of HackerNews commenter dschobel: &ldquo;There is so much less friction than using macports or fink that I dropped them immediately.&rdquo; That&rsquo;s a good way of putting it. Homebrew is just less noisy and less intrusive.</p>

<p>There are other advantages to Homebrew. The scripts (or &ldquo;formula&rdquo; in Homebrew nomenclature) for building and installing packages are simple Ruby scripts. Combine the ease of creating formula with the ease of submitting them to the project &ndash; as it <a href="https://github.com/mxcl/homebrew">lives on Github</a> and anyone can contribute with a simple fork and a pull request &ndash; and you&rsquo;ve got an environment for rapid crowdsourced updates.</p>

<p>And update it has. Originally I ran Homebrew with MacPorts as a backup for things that weren&rsquo;t yet in Homebrew, but the number of such packages has decreased dramatically. The 1587 formulas (as of this writing) in Homebrew is still much less than the 8100 packages in MacPorts or the 12000 packages in Fink, but the important stuff is well represented (and part of the difference is due to Homebrew intentionally excluding things already in Darwin). Still, it is perfectly fine to run more than one package manager to get the package coverage you need.</p>

<p>Homebrew is very easy to use &ndash; I won&rsquo;t bother replicating the explanation of basic commands here, as the <a href="http://mxcl.github.com/homebrew/">home page</a> and the <a href="https://github.com/mxcl/homebrew/wiki/Installation">instructions on the wiki</a> cover them nicely. But I will share one little BASH alias that I use. There is no single Homebrew command for upgrading all of your installed Homebrew packages to their latest versions, the way you might in a Debian-based OS with an &ldquo;apt-get upgrade&rdquo;. But a handy little BASH alias takes care of that:</p>

<p>[bash]# Homebrew &ndash; upgrade all installed packages
alias brew-upgrade=&lsquo;brew update &amp;&amp; brew list | xargs brew install&rsquo;[/bash]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Homebrew - gnutls build failure fix]]></title>
    <link href="http://brendonrapp.github.io/2011/06/06/os-x-homebrew-gnutls-build-failure-fix/"/>
    <updated>2011-06-06T06:21:18-07:00</updated>
    <id>http://brendonrapp.github.io/2011/06/06/os-x-homebrew-gnutls-build-failure-fix</id>
    <content type="html"><![CDATA[<p>When trying to update my Homebrew install, I was getting this error when building <em>gnutls</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: Failed executing: make install
</span><span class='line'>Please report this bug: https://github.com/mxcl/homebrew/wiki/new-issue
</span><span class='line'>These existing issues may help you:  
</span><span class='line'>https://github.com/mxcl/homebrew/issues/#issue/4236</span></code></pre></td></tr></table></div></figure>


<p>The Github page linked does have the answer, but I missed it for a while because I didn&rsquo;t scroll down to <a href="https://github.com/mxcl/homebrew/issues/4236#issuecomment-1045448">the money post</a>. The answer is to paste the following into your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for dep in $(brew deps gnutls); do brew remove --force $dep; done  
</span><span class='line'>brew install gnutls</span></code></pre></td></tr></table></div></figure>


<p>Thank you, <a href="https://github.com/jabley">jabley</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stuff I Like That You Should Too: Moleskine Notebooks]]></title>
    <link href="http://brendonrapp.github.io/2011/06/06/stuff-i-like-that-you-should-too-moleskine-notebooks/"/>
    <updated>2011-06-06T05:55:11-07:00</updated>
    <id>http://brendonrapp.github.io/2011/06/06/stuff-i-like-that-you-should-too-moleskine-notebooks</id>
    <content type="html"><![CDATA[<p>Yes, I know they&rsquo;re the hipster&rsquo;s notebook and that they have a cultish following. Yes, I know that their posturing as the <a href="http://www.moleskine.com/moleskine_world/_the_legendary_notebook_moleskine.php">notebook of Hemingway and Picasso</a> is a healthy dose of creative license. Yes, I know that they&rsquo;re overpriced and that for all the talk of Italian design and French paper, they&rsquo;re <a href="http://www.moleskine.com/catalogue/moleskine_quality.php">bound together by cheap Chinese labor</a>.</p>

<p>But frankly, none of that speaks to the quality of the notebook. And as I nearly fill my first one with a year&rsquo;s worth of work notes, I must say that mine has been a durable, reliable tool.</p>

<p><img class="left" src="http://www.economyofeffort.com/wp-content/uploads/2011/06/moleskine.jpg"> I&rsquo;ve never been completely happy with computer-based note-taking solutions (though I have come closer with Evernote on the iPad and iPhone). And like many geek brains &ndash; constantly preoccupied with the last technical problem it was trying to solve &ndash; mine is a forgetful one.</p>

<p>So, a year ago, I invested in my first Moleskine notebook. I had, of course, heard all of the praise from the true believers. I decided to give them a shot myself.</p>

<p>My writing needs are not like those of, say, actual <em>writers</em>. But I needed a good, compact notebook that I could take everywhere, and one that would be able to hold its own on the inside of a laptop bag, being smashed up against larger and heavier objects.</p>

<p>The Moleskine is beautifully and simply designed. The importance of the little strap that holds the book closed cannot be easily overstated. Unlike every other paper-based thing that is subjected to the interior of my laptop bag, the Moleskine pages stay intact and unmolested, locked away behind an impenetrable shell held closed by that handy little strap.</p>

<p>As much as I like the idea of going completely paperless (as I am with magazines and books), the &ldquo;best tool for the job&rdquo; mindset wins out. I will continue to use Evernote for certain things, but for my daily work notes, I will keep reaching for my Moleskine.</p>
]]></content>
  </entry>
  
</feed>
