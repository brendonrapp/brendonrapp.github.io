<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Economy of Effort]]></title>
  <link href="http://brendonrapp.github.io/categories/vim/atom.xml" rel="self"/>
  <link href="http://brendonrapp.github.io/"/>
  <updated>2014-07-20T02:04:46-07:00</updated>
  <id>http://brendonrapp.github.io/</id>
  <author>
    <name><![CDATA[Brendon Rapp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim tricks for Ruby hashes]]></title>
    <link href="http://brendonrapp.github.io/2014/07/09/vim-tricks-for-ruby-hashes/"/>
    <updated>2014-07-09T19:59:00-07:00</updated>
    <id>http://brendonrapp.github.io/2014/07/09/vim-tricks-for-ruby-hashes</id>
    <content type="html"><![CDATA[<p>I have a couple of functions in my .vimrc for manipulating Ruby hashes.</p>

<p>The first one is to convert hashes from Ruby 1.8 style into Ruby 1.9+ style, eg.</p>

<p>```ruby</p>

<h1>before</h1>

<p>:symbol_key => &lsquo;value&rsquo;</p>

<h1>after</h1>

<p>symbol_key: &lsquo;value&rsquo;
```</p>

<p>I create this function for both Normal and Visual modes to allow updating either a selected hash, or the entire file.
```vim
function! RubyHashesAll()
  :%s/:([^ ]<em>)(\s</em>)=>/\1:/ge
endfunction</p>

<p>function! RubyHashesSelected()
  :&lsquo;&lt;,&rsquo;>s/:([^ ]<em>)(\s</em>)=>/\1:/ge
endfunction</p>

<p>nmap <Leader>rhh :call RubyHashesAll()<CR>
vmap <Leader>rhh :call RubyHashesSelected()<CR>
```</p>

<p>Next, I have one for taking a hash and extracting an array of the hash keys.</p>

<p>```ruby</p>

<h1>before</h1>

<p>{ &lsquo;one&rsquo; => two, :three => &lsquo;four&rsquo;, five: 6 }</p>

<h1>after</h1>

<p>[&lsquo;one&rsquo;, :three, :five]
```</p>

<p>Here, I have the command bound only in Visual mode, as I don&rsquo;t see a case where I&rsquo;d want to do this globally.</p>

<p>```vim
function! RubyExtractHashKeys()
  :&lsquo;&lt;,&rsquo;>s/([:&lsquo;&ldquo;]\?[a-zA-Z]+[&rsquo;&rdquo;]\?)\s<em>=>[^,}]+([,}])/\1\2/ge
  :&lsquo;&lt;,&rsquo;>s/([a-zA-Z]+)[:]\s</em>[^,}]+([,}])/:\1\2/ge
  :&lsquo;&lt;,&rsquo;>s/{\s<em>/[/ge
  :&lsquo;&lt;,&rsquo;>s/\s</em>}/]/ge
endfunction</p>

<p>vmap <Leader>rhe :call RubyExtractHashKeys()<CR>
```</p>

<p>The regexes can probably be improved to fix some edge cases, and I&rsquo;m certain there&rsquo;s a way in Vim to make it so that I don&rsquo;t have to define the All and Selected versions of RubyHashes as separate functions. But these do the job for me now, until I reach a higher plane of Vim mastery.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zsh, tmux, vim, and 256 color madness]]></title>
    <link href="http://brendonrapp.github.io/2014/07/04/zsh/"/>
    <updated>2014-07-04T21:20:00-07:00</updated>
    <id>http://brendonrapp.github.io/2014/07/04/zsh</id>
    <content type="html"><![CDATA[<p><strong>tl;dr: You want $TERM to be <code>screen-256color</code> when tmux is running, and you want it to be <code>xterm-256color</code> when tmux is <em>not</em> running. Also, launch tmux with <code>-2</code> argument.</strong></p>

<p>I love <a href="https://wiki.archlinux.org/index.php/Tmux">tmux</a>. It is the primary reason why I switched from using gVim to console vim. I love having a fully terminal-based workflow. It beats switching between a GUI editor app and terminal window any day.</p>

<p>This switch, however, was not without some issues. Here are the solutions to two that I encountered.</p>

<h3>Weirdness with zsh, tmux, and vim</h3>

<h4>Problems:</h4>

<ul>
<li>when $TERM is <code>screen-256color</code> but tmux is <em>not</em> running, zsh will echo your command into the output when you hit Enter:</li>
</ul>


<p><img src="/media/images/screen-256color-no-tmux.png" alt="" /></p>

<p>Notice how the output of the &ldquo;ls&rdquo; and &ldquo;echo&rdquo; commands repeat themselves in the output stream as soon as I switched to <code>screen-256color</code>.</p>

<ul>
<li>when $TERM is <code>xterm-256color</code> while tmux is running, colors will not display properly in Vim:</li>
</ul>


<p style="text-align:left !important;"><code>vim /etc/default/grub</code> while <code>TERM=screen-256color</code>:</p>


<p><img src="/media/images/tmux-vim-screen-256color.png" alt="" /></p>

<p style="text-align:left !important;"><code>vim /etc/default/grub</code> while <code>TERM=xterm-256color</code>:</p>


<p><img src="/media/images/tmux-vim-xterm-256color.png" alt="" /></p>

<h4>Solution:</h4>

<p>In my zsh config (~/.zshrc), I set xterm-256color to be the default TERM, but right after that, added a command that would re-export TERM as screen-256color if tmux is running:</p>

<pre><code>export TERM=xterm-256color
[ -n "$TMUX" ] &amp;&amp; export TERM=screen-256color
</code></pre>

<h3>No Vim colorschemes when tmux is launched by terminal app in place of shell</h3>

<h4>Problem:</h4>

<p>I ran into a specific set of circumstances where my Vim colorscheme would not display.</p>

<p>Terminal applications usually launch a shell by default, but some (like gnome-terminal) have the option of defining a command to be run rather instead of the shell.</p>

<p>If I set this command to <code>tmux</code>, tmux would indeed launch. However, if I then ran Vim, the colorscheme would not display correctly.</p>

<p>However, if I allowed gnome-terminal to launch a shell, and then ran <code>tmux</code> myself from that shell, Vim would display properly within that tmux session.</p>

<h4>Solution:</h4>

<p>I got my clue from <a href="http://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode">this StackOverflow post</a>. Basically, what is happening is that, when running <code>tmux</code> from within my shell, which is configured for 256 colors, tmux would launch in 256 color mode. But when I had gnome-terminal launch tmux directly, it would not.</p>

<p>The easy way around this was to use the &ldquo;-2&rdquo; argument for tmux, making the command <code>tmux -2</code>.</p>

<p><img src="/media/images/gnome-terminal-auto-tmux.png" alt="" /></p>

<p>With that command in place, tmux launches whenever firing up gnome-terminal, and does so in 256 color mode.</p>
]]></content>
  </entry>
  
</feed>
