<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Economy of Effort]]></title>
  <link href="http://www.economyofeffort.com/categories/octopress/atom.xml" rel="self"/>
  <link href="http://www.economyofeffort.com/"/>
  <updated>2014-12-16T20:35:46-08:00</updated>
  <id>http://www.economyofeffort.com/</id>
  <author>
    <name><![CDATA[Brendon Rapp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixed the Archive Page]]></title>
    <link href="http://www.economyofeffort.com/2014/07/20/fixed-the-archive-page/"/>
    <updated>2014-07-20T02:18:00-07:00</updated>
    <id>http://www.economyofeffort.com/2014/07/20/fixed-the-archive-page</id>
    <content type="html"><![CDATA[<p>Finally got around to fixing the Archive page on this site.</p>

<p>If I recall correctly, what happened originally is that I was attempting to get rid of the &ldquo;/blog/&rdquo; part of the archive path, but got distracted halfway through and left it incomplete.</p>

<p>For reference: this part of the archive path is not a user-configurable part of Octopress per se. It is a default location for a file in Jekyll, which is in <code>source/blog/archive</code> in an Octopress site repository. Simply moving the <code>archive/</code> folder out of <code>blog/</code> and into the top level of <code>source/</code> will make the archive page generate without the &ldquo;/blog/&rdquo; part of the page. (For further reference, see <a href="https://github.com/imathis/octopress/issues/464#issuecomment-5587568">the workaround post</a> on the <a href="https://github.com/imathis/octopress/issues/464">issue on Github</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye Wordpress, Hello Octopress]]></title>
    <link href="http://www.economyofeffort.com/2012/08/17/goodbye-wordpress/"/>
    <updated>2012-08-17T17:32:00-07:00</updated>
    <id>http://www.economyofeffort.com/2012/08/17/goodbye-wordpress</id>
    <content type="html"><![CDATA[<p>I have been running this blog on Wordpress since 2005. Back then, Wordpress was purely a blogging engine.</p>

<p>In the years since then, Wordpress has grown into something more akin to a CMS built around a blogging engine. At work, we have used it as such for a couple of <a href="http://www.luckydogsbakery.com">small</a> <a href="http://www.warginwines.com">storefronts</a>, built around the blog and the Wordpress e-Commerce shopping cart plugin.</p>

<p>{% img right /media/images/wordpress-world-problems.jpg 300 %}
Maintaining a full Wordpress installation for my personal blog, however, had become cumbersome. Particularly so since I am not running any other PHP code for personal projects. At <a href="http://www.lonestarrubyconf.com/">Lone Star Ruby Conference</a>, <a href="https://speakerdeck.com/u/techpeace/p/front-end-web-development-with-ruby">one of the talks</a> finally convinced me that it was time to leave Wordpress behind, and to go with a static site compiled blog engine. I had previous experience with a static site compiler, nanoc, which we use at work for creating static websites. A more blog-aware tool that works similarly held plenty of appeal to me.</p>

<p>I also no longer wished to run this site on hosting that costs me money. I started with shared hosts like Dreamhost, graduated to a Linode VPS (more for experimenting with VPS hosting than for any actual traffic needs), and most recently ditched the VPS and hosted on NearlyFreeSpeech&rsquo;s low-cost pay-as-you-use hosting. But for how low traffic the site is, paying even what I give to NearlyFreeSpeech seemed unnecessary. Heroku&rsquo;s free single web dyno was staring me in the face, offering more than enough hosting power for a static version of my site, for $0.</p>

<h2>Introducing Jekyll and Octopress</h2>

<p>{% img right /media/images/jekyll-doctor.jpg 300 %}</p>

<p><a href="https://github.com/imathis/octopress/">Octopress</a> is a framework built around the Jekyll blogging engine. It provides various plugins and extensions, as well as a nice default theme, to make blogging on Jekyll a nice out-of-the-box experience.</p>

<p>Jekyll allows users to write blog posts in <a href="http://daringfireball.net/projects/markdown/syntax/">Markdown</a> and compile them into static HTML pages. Instead of writing posts in a web-based panel, posts are created by adding a new Markdown file in the _posts folder, and writing the post in there using the user&rsquo;s editor of choice. Finally, I am blogging with Vim.</p>

<p>Octopress provides out-of-the-box support for Disqus commenting, recent Twitter tweets in the sidebar, Google Analytics, and a whole host of other added functionality.</p>

<h2>Importing Content from Wordpress</h2>

<p>{% img right /media/images/wordpress-logo-small.png %}</p>

<p>My strategy for importing my Wordpress content into a Jekyll blog reolved around <a href="https://github.com/thomasf/exitwp">Exitwp</a>. Exitwp will parse a Wordpress export file and generate a Jekyll blog with the same content.</p>

<p>The Exitwp Github page has instructions for installing dependencies on Ubuntu, but on Homebrew on OS X, the commands were:</p>

<p><code>
$ brew install python
$ brew install pyyaml html2text beautifulsoup
</code>
(Important: make sure /usr/local/share/python is in $PATH.)</p>

<p>Next, I needed to go into my Wordpress admin page and generate a Wordpress export XML file. As of the time of this writing, this is done in Wordpress by logging in to the dashboard as an admin, and going to Tools &ndash;> Export.</p>

<p>With the export XML file generated and on my desktop, I set Exitwp to work:</p>

<p><code>
$ python exitwp.py name-of-export-file.xml
</code></p>

<p>One important thing to note: images require some handling. You can make Exitwp download your blog&rsquo;s images by editing the Exitwp config.yaml file and setting&hellip;</p>

<p><code>
download_images: True
</code></p>

<p>&hellip; however, this will only download the image files. It will not edit the posts themselves to point to new image locations.</p>

<p>I did not relish the idea of going through all of my old posts and editing each of the image URLs. Instead, what I did was create a wp-content/uploads folder in my Octopress blog&rsquo;s source/ folder, and copied the contents of wp-content/uploads from my Wordpress blog into there. Since I am hosting the new blog on the same domain, the result is that all of those image files will still be on the same URL. Having a wp-content folder inside my new blog is slightly ugly, but it solves the problem for now, and allows me to gradually move images over and edit image paths on old posts.</p>

<p>Also important to note: comments have to be dealt with separately, too. As a static site has no capacity for comment handling itself, comments on Jekyll/Octopress blogs are handled by <a href="http://www.disqus.com">Disqus</a>. Fortunately, in my case, I had already moved my Wordpress site to using Disqus commenting. For me, that meant that my comments would carry over to the new site, so long as my post URLs did not change. In my case, this meant making just a small tweak to the config file of the Jekyll blog once it was generated, so that the URL structure would mirror my old Wordpress site&rsquo;s.</p>

<h2>Setting up Octopress</h2>

<p>{% img right /media/images/octopress-logo.png %}</p>

<p>After running Exitwp, I have my old blog exported into a raw Jekyll blog. But now, I have to get that blog into Octopress.</p>

<p>This part confused me for a while. It seems like something everyone else just glossed over.</p>

<p>For starters, I knew I wanted to store this blog in Git. The Octopress instructions would have me clone the Octopress repository, but I don&rsquo;t want Octopress to be the origin on my blog repo. Instead, I did much like <a href="http://jphenow.com/docs/setup/">this blog post demonstrates</a> &ndash; I made my own blank repository, and I added the Octopress repo as a remote head.</p>

<p>So, now I had Git set up, and I had Octopress checked out locally by virtue of having run <code>git pull octopress master</code>. The part that wasn&rsquo;t immediately obvious to me was how I was to take my Exitwp-generated Jekyll blog and put that in there.</p>

<p>Exitwp put my generated blog in exitwp/build/jekyll/blog-name. I copied the contents of this folder, and pasted it into octopress/source. Now, my Jekyll content was where it needed to be in Octopress.</p>

<p>To update my remote repo&rsquo;s copy of the site, I check everything in, and run</p>

<p><code>
$ git push origin master
</code></p>

<p>And whenever I want to pull in the latest updates from Octopress, it&rsquo;s</p>

<p><code>
$ git pull octopress master
</code></p>

<h2>Deploying to Heroku</h2>

<p>{% img left /media/images/heroku-logo-light-300x100.png %}
Adding to the Git setup even more was the fact that I wanted to deploy this to <a href="http://www.heroku.com">Heroku</a>. For that setup, I basically followed <a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku">these instructions</a> starting at the &ldquo;Deploy to Heroku&rdquo; section. I had never deployed an app to Heroku, but it was very straightforward.</p>

<p>Since Heroku acts as a Git server, I could have skipped the part where I made my own repository host, and just cloned from Heroku whenever I wanted to access the repo on another machine. But I prefer having a copy of the site in my own Git hosting account (on Bitbucket, for the record), and it&rsquo;s hardly any additional bother. My Bitbucket repo is on &ldquo;origin&rdquo;, the Octopress repo is on &ldquo;octopress&rdquo;, and Heroku is on &ldquo;heroku&rdquo;.</p>

<p>Whenever I want to push updates to deploy to Heroku, I simply do</p>

<p><code>
$ git push heroku master
</code></p>

<p>Finally, I set up Heroku to <a href="https://devcenter.heroku.com/articles/custom-domains">use my domain name</a>.</p>

<h2>What I Think</h2>

<p>I haven&rsquo;t used Octopress for very long yet, but a few thoughts:</p>

<ul>
<li>Writing posts in Vim and in Markdown syntax has made me realize how much of a drag using the Wordpress post editor was on my blog writing. I write code all day in Vim, and writing my blog posts there too is much less of a context switch. Flicking back and forth between Vim buffers is a lot less of a hassle. It makes offline blogging a lot easier, too.</li>
<li>I never found a code formatting plugin for Wordpress that I did not hate. Octopress comes with code formatting styling out-of-the-box and it works very well. I&rsquo;m not a huge fan of the Solarized theme it uses by default, and I may see about changing that in the future. But the important thing is that it works.</li>
<li>Not having to worry about Wordpress updates is a big relief. I can&rsquo;t say that I stayed on top of updates nearly as much as I needed to. And I don&rsquo;t have to worry about database backups, either. There&rsquo;s a &ldquo;weight off my shoulders&rdquo; feeling with making this move.</li>
<li>There&rsquo;s something comforting about having my entire blog history as a series of Markdown files, instead of posts locked away in a Wordpress database table in MySQL.</li>
<li>There are a lot of neat Octopress plugins that I haven&rsquo;t really delved into yet. But the default out-of-the-box experience is pretty much awesome. Even if, for now, my blog looks just like a bunch of other Octopress blogs.</li>
</ul>


<h2>Tip: Use IFTTT to tweet new posts</h2>

<p>{% img right /media/images/ifttt-logo.png %}
One of the plugins I used with Wordpress would add tweets to my Twitter feed, informing followers of new posts to the blog.</p>

<p>Without the server-side component, Octopress lacks this ability. However, thanks to the fact that Octopress generates an RSS feed file, we can use an external service to accomplish the same thing.</p>

<p><a href="http://www.ifttt.com">IFTTT</a> is a service that allows you to write &ldquo;triggers&rdquo; that perform various actions. In this case, I have IFTTT watching my blog&rsquo;s RSS feed, and whenever it detects a new feed item, it makes a post to my Twitter, as well as one to my Facebook wall.</p>

<h2>Tip: Use Pow on OS X for easy testing</h2>

<p>{% img right /media/images/pow-logo.png 200 %}
By default, users can run <code>rake preview</code> to make Octopress spin up a web server at <a href="http://0.0.0.0:4000">http://0.0.0.0:4000</a> and listen for changes to files to automatically rebuild the site for easy previewing.</p>

<p>This process can be made a little nicer with <a href="http://pow.cx/">Pow</a>, a handy little Rack webserver for OS X.</p>

<p>Just add a symlink your site folder in to ~/.pow/, and your system will run that site, and configure it to be reachable at <a href="http://symlink-name.dev.">http://symlink-name.dev.</a> Then, run <code>rake watch</code> to make Octopress listen for changes and rebuild pages.</p>

<h2>Gotcha: Drafts aren&rsquo;t imported by Exitwp</h2>

<p>I had accumulated many half-written posts in my Wordpress install over the years. Posts that I <em>totally</em> intend to finish.</p>

<p>Exitwp did not import these (or, more likely, the Wordpress export functionality did not include them in the export. I&rsquo;m not sure which it is.)</p>

<p>I ended up fetching these manually.</p>

<h2>Gotcha: zsh and square bracket commands</h2>

<p>From that point on, I just followed the Octopress documentation to get up and running. I did, however, run into an annoying issue.</p>

<p>Octopress command-line commands often use square brackets, such as:</p>

<p><code>
$ rake new_post["My new post's title"]
</code></p>

<p>Run it in zsh, though, and you get:</p>

<p><code>
$ rake new_post["My new post's title"]
zsh: no matches found: new_post[My new post's title]
</code></p>

<p>The problem is that square brackets are a <a href="http://zsh.sourceforge.net/Doc/Release/Expansion.html#Filename-Generation">glob operator</a> in zsh. <a href="http://ryanarneson.com/blog/2012/04/07/rake-new-post-doesnt-work-with-zsh/">This blog post</a> pointed me in the right direction. The &ldquo;solution&rdquo; is to escape the square bracket characters.</p>

<p><code>
$ rake new_post\["My new post's title"\]
</code></p>

<p>Alternately, zsh users can disable zsh&rsquo;s GLOB option. From the Octopress Github issue on this problem, though, it sounds like some tweaks will be added to Octopress to address the issue.</p>

<h2>References</h2>

<ul>
<li><a href="http://blog.pixelingene.com/2011/09/switching-to-the-octopress-blogging-engine/">Pixel Gene: Switching to the Octopress Blogging Engine</a></li>
<li><a href="http://www.peterprovost.org/blog/2012/04/15/switching-the-blog-to-octopress">Peter Provost: Switching the Blog to Octopress</a></li>
<li><a href="http://jphenow.com/docs/setup/">JPhenow: Octopress Setup</a></li>
<li><a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku">Sam de Freyssinet: Get Blogging with Octopress on Heroku</a></li>
<li><a href="http://ryanarneson.com/blog/2012/04/07/rake-new-post-doesnt-work-with-zsh/">Brain Dump: Octopress' rake new_post Doesn&rsquo;t Work with zsh</a></li>
<li><a href="http://alexyoung.org/2009/07/09/new-blog/">alexyoung.org: Using Jekyll</a></li>
<li><a href="http://instant-thinking.de/2012/05/08/tweeting-a-new-octopress-post-to-twitter/">Instant Thinking: Tweeting a new Octopress post to Twitter</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
