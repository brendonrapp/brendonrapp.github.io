<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: homebrew | Economy of Effort]]></title>
  <link href="http://www.economyofeffort.com/categories/homebrew/atom.xml" rel="self"/>
  <link href="http://www.economyofeffort.com/"/>
  <updated>2014-12-16T19:27:55-08:00</updated>
  <id>http://www.economyofeffort.com/</id>
  <author>
    <name><![CDATA[Brendon Rapp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beyond Ctrl: Make That Caps Lock Key Useful]]></title>
    <link href="http://www.economyofeffort.com/2014/08/11/beyond-ctrl-remap-make-that-caps-lock-key-useful/"/>
    <updated>2014-08-11T14:19:00-07:00</updated>
    <id>http://www.economyofeffort.com/2014/08/11/beyond-ctrl-remap-make-that-caps-lock-key-useful</id>
    <content type="html"><![CDATA[<p><strong>tl;dr: Supercharge your Caps Lock key by making it Esc when tapped, and Ctrl when held</strong></p>

<p>Caps Lock. A useless key sitting in prime keyboard real estate. Many software developers and power users repurpose the key by remapping it to Control.</p>

<p>After all, on old UNIX terminals, that&rsquo;s exactly what the key to the left of &ldquo;A&rdquo; was:</p>

<p><img src="/media/images/sun-keyboard.png" alt="" /></p>

<p>Replacing the Caps Lock key with Ctrl makes a lot of keyboard shortcuts more convenient. But we need not stop there. Some true Men and Women of Genius came to the realization that, since Ctrl&rsquo;s behavior is based around behind held down (a modifier key) and doesn&rsquo;t do anything when pressed and released, it is possible to make Caps Lock do something <em>else</em> when tapped instead of held. For Vim users, the obvious choice is the Esc key.</p>

<p>We can do this in both Mac OS X and Linux.</p>

<h2>OS X</h2>

<h3>If you want all Ctrl keys to behave like Esc when tapped</h3>

<p>This is the easiest way, and the option I use. (I rarely find myself hitting the normal Ctrl keys anyway.)</p>

<p>First, open System Preferences &ndash;> Keyboard, and click Modifier Keys button. Click the Caps Lock drop-down and set it to Control:</p>

<p><img src="/media/images/osx-remap-esc-key.png" alt="" /></p>

<p>Now, install <a href="https://pqrs.org/osx/karabiner/">Karabiner</a> (formerly known as KeyRemap4MacBook). If you are a Homebrew user, you should check out <a href="https://github.com/caskroom/homebrew-cask">Homebrew Cask</a> and install Karabiner with <code>$ brew cask install karabiner</code></p>

<p>Open Karabiner. Enable the first setting from the screenshot below:</p>

<p><img src="/media/images/karabiner-1.png" alt="" /></p>

<p>The other option I have there, &ldquo;Disable Escape Key&rdquo;, is something I&rsquo;ve done just to get myself in the habit of using the Caps Lock key for Esc. It is not required, it is just an option if you want to help train yourself to use the new key.</p>

<h3>If you only want the Caps Lock key to behave like Esc when tapped</h3>

<p>To do this, we&rsquo;re going to take a slightly different approach. Instead of using OS X&rsquo;s native Caps Lock remapping, we need to use another app, called <a href="https://pqrs.org/osx/karabiner/seil.html">Seil</a> (from the same developer as Karabiner) to remap the Esc key to F19, and then use Karabiner to map F19 to our cool Ctrl/Esc hybrid key.</p>

<p>Install both <a href="https://pqrs.org/osx/karabiner/">Karabiner</a> and <a href="https://pqrs.org/osx/karabiner/seil.html">Seil</a>. (Here again, if you use <a href="https://github.com/caskroom/homebrew-cask">Homebrew Cask</a>, you can do this with <code>$ brew cask install karabiner</code> and <code>$ brew cask install seil</code>)</p>

<p>Open Seil. First, enable the &ldquo;Change Caps Lock&rdquo; option, and set the keycode to 80:</p>

<p><img src="/media/images/seil.png" alt="" /></p>

<p>Next, in Karabiner, enable the &ldquo;F19 for Escape and Control&rdquo; option:</p>

<p><img src="/media/images/karabiner-2.png" alt="" /></p>

<h2>Linux</h2>

<p>To accomplish the same setup in Linux, we need to use a tool called <a href="https://github.com/alols/xcape">xcape</a>.</p>

<p>Build and install xcape per the instructions on the project&rsquo;s Wiki page. One additional step I take after building the app is copying the <code>xcape</code> executable to /usr/local/bin.</p>

<h3>If you only want the Caps Lock key to behave like Esc when tapped</h3>

<p>Add the following lines to your ~/.profile:
<code>
setxkbmap -option 'caps:ctrl_modifier'
xcape -e 'Caps_Lock=Escape'
</code></p>

<h3>If you want all Ctrl keys to behave like Esc when tapped</h3>

<p>Same as above, except we add more arguments to the xcape line:</p>

<p><code>
setxkbmap -option 'caps:ctrl_modifier'
xcape -e 'Caps_Lock=Escape;Control_L=Escape;Control_R=Escape'
</code></p>

<p>Note: If you use some other method of remapping the Caps Lock key to Ctrl (some desktop environments have it as an option in their Keyboard settings, much like OS X), then the Caps_Lock=Escape mapping may not do anything, and you will need to use the Control_L one.</p>

<p>One last little tidbit: Ubuntu 14.10 (&ldquo;Utopic&rdquo;) has xcape <a href="http://packages.ubuntu.com/utopic/xcape">in the universe repos</a>, at least as of the time of this writing. Hopefully it will be included in Ubuntu releases from here on out.</p>

<h2>Now Your Caps Lock Key Rules</h2>

<p>The most useless key on the keyboard (except maybe for Pause, when&rsquo;s the last time you used that?) is now your Swiss Army knife. Vim&rsquo;s keybindings will make a lot more sense now that you can use your pinky the way Bill Joy did on his old ADM3A terminal:</p>

<p><img src="/media/images/adm3a.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reattach-to-user-namespace: The Fix For Your tmux in OS X Woes]]></title>
    <link href="http://www.economyofeffort.com/2013/07/29/reattach-to-user-namespace-the-fix-for-your-tmux-in-os-x-woes/"/>
    <updated>2013-07-29T17:21:00-07:00</updated>
    <id>http://www.economyofeffort.com/2013/07/29/reattach-to-user-namespace-the-fix-for-your-tmux-in-os-x-woes</id>
    <content type="html"><![CDATA[<p><img class="center" src="/media/images/tmux-osx.jpg"></p>

<p><strong>tl;dr: Things not behaving right in tmux on OS X? Install reattach-to-user-namespace</strong></p>

<p>Are you a tmux + Mac OS X user? Have you had any of the following problems?</p>

<ul>
<li>Running <code>launchctl</code> to start services fails with a message like <code>launch_msg(): Socket is not connected</code></li>
<li>Using the OS X Pasteboard commands <code>pbcopy</code> and <code>pbpaste</code> and having them not work</li>
<li>Launching a GUI app from the terminal and getting a &ldquo;ghost window&rdquo;: the app window loads in the background, with no dock icon, cannot be Command-Tab&rsquo;d to, and the app&rsquo;s menu does not populate the top bar when the window gains focus</li>
</ul>


<p>Why does this happen? Chris Johnsen has some <a href="https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard">details</a>&hellip;</p>

<blockquote><p><em>tmux</em> uses the <em>daemon(3)</em> library function when starting its server process. In Mac OS X 10.5, Apple changed <em>daemon(3)</em> to move the resulting process from its original bootstrap namespace to the root bootstrap namespace. This means that the <em>tmux</em> server, and its children, will automatically and uncontrollably lose access to what would have been their original bootstrap namespace (i.e. the one that has access to the pasteboard service).</p></blockquote>

<p>It turns out that Apple has patched the version of GNU screen that they distribute with OS X to avoid this problem. But this is 2013, and we UNIX geeks have moved on to tmux, right? Chris goes on in that README to explain why porting Apple&rsquo;s screen patch to tmux would be tricky.</p>

<p>So, instead, he provides the <em>reattach-to-user-namespace</em> wrapper program. This allows us to launch a process and have that process be attached to the per-user bootstrap namespace, which, to put it simply, makes the program behave as we are expecting.</p>

<p>The &ldquo;trick&rdquo; is to configure tmux to launch its shells with the <em>reattach-to-user-namespace</em> wrapper. By doing that, the shells tmux launches, as well as everything those shells launch, will be attached to the user namespace, and the problems listed at the top of this post will no longer be issues. We can use the <code>default-command</code> option in ~/.tmux.conf to wrap our shell launching command.</p>

<p>First, we need to install <em>reattach-to-user-namespace</em>. If you use Homebrew or MacPorts, this is as easy as:</p>

<pre><code>; with Homebrew
$ brew install reattach-to-user-namespace

; with MacPorts
$ port install tmux-pasteboard
</code></pre>

<p>I use the same dotfiles for Linux as well as OS X, so I only want to do this in the OS X environment. I accomplish this with the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>~/.tmux.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>&amp;ldquo; at the <span class="k">end</span> of the <span class="k">file</span>
</span><span class='line'><span class="k">if</span><span class="p">-</span><span class="k">shell</span> &amp;lsquo;test &amp;rdquo;$<span class="p">(</span>uname<span class="p">)</span>&amp;ldquo; <span class="p">=</span> <span class="c">&quot;Darwin&amp;rdquo;&amp;rsquo; &amp;lsquo;source ~/.tmux-osx.conf&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>~/.tmux-osx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span><span class="p">-</span><span class="k">option</span> <span class="p">-</span><span class="k">g</span> default<span class="p">-</span>command &amp;ldquo;reattach<span class="p">-</span><span class="k">to</span><span class="p">-</span>user<span class="p">-</span>namespace <span class="p">-</span><span class="k">l</span> zsh&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you only use OS X, you can skip creating an external file, and just put the set-option line directly in your ~/.tmux.conf. Also, I am using zsh, so my command to <em>reattach-to-user-namespace</em> is zsh. If you&rsquo;re using a different shell, change that to your shell&rsquo;s name.</p>

<p>With this configuration in place, kill and re-launch tmux. The shells that tmux launches should now get attached to the user namespace, and namespace-related issues should be resolved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Homebrew - gnutls build failure fix]]></title>
    <link href="http://www.economyofeffort.com/2011/06/06/os-x-homebrew-gnutls-build-failure-fix/"/>
    <updated>2011-06-06T06:21:18-07:00</updated>
    <id>http://www.economyofeffort.com/2011/06/06/os-x-homebrew-gnutls-build-failure-fix</id>
    <content type="html"><![CDATA[<p>When trying to update my Homebrew install, I was getting this error when building <em>gnutls</em>:</p>

<p><code>
Error: Failed executing: make install
Please report this bug: https://github.com/mxcl/homebrew/wiki/new-issue
These existing issues may help you:  
https://github.com/mxcl/homebrew/issues/#issue/4236
</code></p>

<p>The Github page linked does have the answer, but I missed it for a while because I didn&rsquo;t scroll down to <a href="https://github.com/mxcl/homebrew/issues/4236#issuecomment-1045448">the money post</a>. The answer is to paste the following into your terminal:</p>

<p><code>
for dep in $(brew deps gnutls); do brew remove --force $dep; done  
brew install gnutls
</code></p>

<p>Thank you, <a href="https://github.com/jabley">jabley</a>.</p>
]]></content>
  </entry>
  
</feed>
